
ITI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fe  00800060  00003f40  00003fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080015e  0080015e  000040d2  2**0
                  ALLOC
  3 .stab         0000402c  00000000  00000000  000040d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016c6  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000097c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009906  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d358  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d745  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 35       	cpi	r26, 0x5E	; 94
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e5       	ldi	r26, 0x5E	; 94
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <main>
      8a:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_VoidInit>:
#include "../../HAL/LCD/LCD_Int.h"

u8 G_u8_RecievedString[35];

void MUART_VoidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRB = 0b00011000;
     b4e:	ea e2       	ldi	r30, 0x2A	; 42
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	86 e8       	ldi	r24, 0x86	; 134
     b5c:	80 83       	st	Z, r24
	MUART_VoidSetBaudRate(51);
     b5e:	63 e3       	ldi	r22, 0x33	; 51
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 de 05 	call	0xbbc	; 0xbbc <MUART_VoidSetBaudRate>
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <MUART_VoidTransmit>:


void MUART_VoidTransmit( u8 A_u8_Data )
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	80 72       	andi	r24, 0x20	; 32
     b88:	90 70       	andi	r25, 0x00	; 0
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	b9 f3       	breq	.-18     	; 0xb7c <MUART_VoidTransmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR = A_u8_Data;
     b8e:	ec e2       	ldi	r30, 0x2C	; 44
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	80 83       	st	Z, r24
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <MUART_u8Receive>:


u8 	 MUART_u8Receive()
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
     ba6:	eb e2       	ldi	r30, 0x2B	; 43
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	88 23       	and	r24, r24
     bae:	dc f7       	brge	.-10     	; 0xba6 <MUART_u8Receive+0x8>
	;
	/* Get and return received data from buffer */
	return UDR;
     bb0:	ec e2       	ldi	r30, 0x2C	; 44
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <MUART_VoidSetBaudRate>:


void MUART_VoidSetBaudRate( u32 A_u32_Baud )
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <MUART_VoidSetBaudRate+0x6>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <MUART_VoidSetBaudRate+0x8>
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	69 83       	std	Y+1, r22	; 0x01
     bca:	7a 83       	std	Y+2, r23	; 0x02
     bcc:	8b 83       	std	Y+3, r24	; 0x03
     bce:	9c 83       	std	Y+4, r25	; 0x04
	UBRRL = A_u32_Baud;
     bd0:	e9 e2       	ldi	r30, 0x29	; 41
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <MUART_VoidSendString>:

void MUART_VoidSendString	( u8* A_u8_StringPtr )
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <MUART_VoidSendString+0x6>
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <MUART_VoidSendString+0x24>


	while(  *A_u8_StringPtr != '\0')
	{
		MUART_VoidTransmit(*A_u8_StringPtr);
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	80 81       	ld	r24, Z
     bfc:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
		A_u8_StringPtr++;
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01

void MUART_VoidSendString	( u8* A_u8_StringPtr )
{


	while(  *A_u8_StringPtr != '\0')
     c0a:	e9 81       	ldd	r30, Y+1	; 0x01
     c0c:	fa 81       	ldd	r31, Y+2	; 0x02
     c0e:	80 81       	ld	r24, Z
     c10:	88 23       	and	r24, r24
     c12:	89 f7       	brne	.-30     	; 0xbf6 <MUART_VoidSendString+0x10>
	{
		MUART_VoidTransmit(*A_u8_StringPtr);
		A_u8_StringPtr++;
	}
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <MUART_VoidReceiveString>:
//
//	A_u8_StringPtr[A_u32_Size-1] = '\0';
//}

void MUART_VoidReceiveString( u8* A_u8_StringPtr ,u8 A_u8_Size )
{
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <MUART_VoidReceiveString+0xa>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <MUART_VoidReceiveString+0xc>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9b 83       	std	Y+3, r25	; 0x03
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	6c 83       	std	Y+4, r22	; 0x04

	for(u8 i = 0; i < A_u8_Size ; i++ )
     c34:	19 82       	std	Y+1, r1	; 0x01
     c36:	2f c0       	rjmp	.+94     	; 0xc96 <MUART_VoidReceiveString+0x78>
	{
		A_u8_StringPtr[i] = MUART_u8Receive();
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	8c 01       	movw	r16, r24
     c44:	02 0f       	add	r16, r18
     c46:	13 1f       	adc	r17, r19
     c48:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 83       	st	Z, r24

		if(A_u8_StringPtr[i] == '\n' || A_u8_StringPtr[i] == '\r')
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	fc 01       	movw	r30, r24
     c5c:	e2 0f       	add	r30, r18
     c5e:	f3 1f       	adc	r31, r19
     c60:	80 81       	ld	r24, Z
     c62:	8a 30       	cpi	r24, 0x0A	; 10
     c64:	59 f0       	breq	.+22     	; 0xc7c <MUART_VoidReceiveString+0x5e>
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	80 81       	ld	r24, Z
     c78:	8d 30       	cpi	r24, 0x0D	; 13
     c7a:	51 f4       	brne	.+20     	; 0xc90 <MUART_VoidReceiveString+0x72>
		{	A_u8_StringPtr[i] = '\0';	break;		}
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	fc 01       	movw	r30, r24
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	10 82       	st	Z, r1
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <MUART_VoidReceiveString+0x80>
//}

void MUART_VoidReceiveString( u8* A_u8_StringPtr ,u8 A_u8_Size )
{

	for(u8 i = 0; i < A_u8_Size ; i++ )
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	99 81       	ldd	r25, Y+1	; 0x01
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	98 17       	cp	r25, r24
     c9c:	68 f2       	brcs	.-102    	; 0xc38 <MUART_VoidReceiveString+0x1a>

		if(A_u8_StringPtr[i] == '\n' || A_u8_StringPtr[i] == '\r')
		{	A_u8_StringPtr[i] = '\0';	break;		}
	}

	A_u8_StringPtr[A_u8_Size] = '\0';
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	9b 81       	ldd	r25, Y+3	; 0x03
     ca8:	fc 01       	movw	r30, r24
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	10 82       	st	Z, r1
}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <MUART_VoidReceiveString2>:
void MUART_VoidReceiveString2( u8 *A_u8_StringPtr, u32 A_size )
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	28 97       	sbiw	r28, 0x08	; 8
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	4d 83       	std	Y+5, r20	; 0x05
     cdc:	5e 83       	std	Y+6, r21	; 0x06
     cde:	6f 83       	std	Y+7, r22	; 0x07
     ce0:	78 87       	std	Y+8, r23	; 0x08
	    u8 i = 0;
     ce2:	1a 82       	std	Y+2, r1	; 0x02
	    u8 receivedChar;

	    // Receive characters until buffer is full or newline character is received
	    do {
	        receivedChar = MUART_u8Receive();
     ce4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     ce8:	89 83       	std	Y+1, r24	; 0x01
	        A_u8_StringPtr[i] = receivedChar;
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	fc 01       	movw	r30, r24
     cf6:	e2 0f       	add	r30, r18
     cf8:	f3 1f       	adc	r31, r19
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	80 83       	st	Z, r24
	        i++;
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	8a 83       	std	Y+2, r24	; 0x02
	    } while (receivedChar != '\0' && i < A_size - 1);
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 23       	and	r24, r24
     d08:	89 f0       	breq	.+34     	; 0xd2c <MUART_VoidReceiveString2+0x6a>
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	af 81       	ldd	r26, Y+7	; 0x07
     d1a:	b8 85       	ldd	r27, Y+8	; 0x08
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	a1 09       	sbc	r26, r1
     d20:	b1 09       	sbc	r27, r1
     d22:	28 17       	cp	r18, r24
     d24:	39 07       	cpc	r19, r25
     d26:	4a 07       	cpc	r20, r26
     d28:	5b 07       	cpc	r21, r27
     d2a:	e0 f2       	brcs	.-72     	; 0xce4 <MUART_VoidReceiveString2+0x22>

	    // Add null termination to the string
	    A_u8_StringPtr[i] = '\0';
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	fc 01       	movw	r30, r24
     d38:	e2 0f       	add	r30, r18
     d3a:	f3 1f       	adc	r31, r19
     d3c:	10 82       	st	Z, r1

}
     d3e:	28 96       	adiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <MUART_VoidReceiveString3>:

void MUART_VoidReceiveString3( u8* A_u8_StringPtr )
{
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <MUART_VoidReceiveString3+0xa>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8_Counter    = 0;
     d64:	19 82       	std	Y+1, r1	; 0x01
     d66:	14 c0       	rjmp	.+40     	; 0xd90 <MUART_VoidReceiveString3+0x40>

	while ( !( UCSRA & (1<<UDRE)) )
	{
		A_u8_StringPtr[L_u8_Counter++] = MUART_u8Receive();
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	8c 01       	movw	r16, r24
     d74:	02 0f       	add	r16, r18
     d76:	13 1f       	adc	r17, r19
     d78:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     d7c:	f8 01       	movw	r30, r16
     d7e:	80 83       	st	Z, r24
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	89 83       	std	Y+1, r24	; 0x01
		MDIO_voidSetPinValue(PORTC,L_u8_Counter,HIGH);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>

void MUART_VoidReceiveString3( u8* A_u8_StringPtr )
{
	u8 L_u8_Counter    = 0;

	while ( !( UCSRA & (1<<UDRE)) )
     d90:	eb e2       	ldi	r30, 0x2B	; 43
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	80 72       	andi	r24, 0x20	; 32
     d9c:	90 70       	andi	r25, 0x00	; 0
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	19 f3       	breq	.-58     	; 0xd68 <MUART_VoidReceiveString3+0x18>
	{
		A_u8_StringPtr[L_u8_Counter++] = MUART_u8Receive();
		MDIO_voidSetPinValue(PORTC,L_u8_Counter,HIGH);
	}
	A_u8_StringPtr[L_u8_Counter] = MUART_u8Receive();
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	8c 01       	movw	r16, r24
     dae:	02 0f       	add	r16, r18
     db0:	13 1f       	adc	r17, r19
     db2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     db6:	f8 01       	movw	r30, r16
     db8:	80 83       	st	Z, r24

}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <MUART_VoidSendNumber>:


void MUART_VoidSendNumber	( u32 A_u32_Number )
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	2a 97       	sbiw	r28, 0x0a	; 10
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	6f 83       	std	Y+7, r22	; 0x07
     de0:	78 87       	std	Y+8, r23	; 0x08
     de2:	89 87       	std	Y+9, r24	; 0x09
     de4:	9a 87       	std	Y+10, r25	; 0x0a
	u32 L_u32_Temp;
	u8 L_u8_Temp;
	for(u8 counter1 = 0 ; counter1 <= 3 ; counter1++)
     de6:	19 82       	std	Y+1, r1	; 0x01
     de8:	2d c0       	rjmp	.+90     	; 0xe44 <MUART_VoidSendNumber+0x7a>
	{
		L_u32_Temp=A_u32_Number;
     dea:	8f 81       	ldd	r24, Y+7	; 0x07
     dec:	98 85       	ldd	r25, Y+8	; 0x08
     dee:	a9 85       	ldd	r26, Y+9	; 0x09
     df0:	ba 85       	ldd	r27, Y+10	; 0x0a
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	ad 83       	std	Y+5, r26	; 0x05
     df8:	be 83       	std	Y+6, r27	; 0x06

		L_u32_Temp = (L_u32_Temp >> ( (3-counter1) * 8 ));
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	82 1b       	sub	r24, r18
     e06:	93 0b       	sbc	r25, r19
     e08:	9c 01       	movw	r18, r24
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	ad 81       	ldd	r26, Y+5	; 0x05
     e1c:	be 81       	ldd	r27, Y+6	; 0x06
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <MUART_VoidSendNumber+0x5e>
     e20:	b6 95       	lsr	r27
     e22:	a7 95       	ror	r26
     e24:	97 95       	ror	r25
     e26:	87 95       	ror	r24
     e28:	2a 95       	dec	r18
     e2a:	d2 f7       	brpl	.-12     	; 0xe20 <MUART_VoidSendNumber+0x56>
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	ad 83       	std	Y+5, r26	; 0x05
     e32:	be 83       	std	Y+6, r27	; 0x06

		L_u8_Temp = (u8)L_u32_Temp;
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	8a 83       	std	Y+2, r24	; 0x02
		MUART_VoidTransmit( L_u8_Temp );
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>

void MUART_VoidSendNumber	( u32 A_u32_Number )
{
	u32 L_u32_Temp;
	u8 L_u8_Temp;
	for(u8 counter1 = 0 ; counter1 <= 3 ; counter1++)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	80 f2       	brcs	.-96     	; 0xdea <MUART_VoidSendNumber+0x20>
		L_u32_Temp = (L_u32_Temp >> ( (3-counter1) * 8 ));

		L_u8_Temp = (u8)L_u32_Temp;
		MUART_VoidTransmit( L_u8_Temp );
	}
}
     e4a:	2a 96       	adiw	r28, 0x0a	; 10
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <MUART_u32ReceiveNumber>:

u32 MUART_u32ReceiveNumber()
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	2a 97       	sbiw	r28, 0x0a	; 10
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32_ReceivedData=0;
     e70:	1f 82       	std	Y+7, r1	; 0x07
     e72:	18 86       	std	Y+8, r1	; 0x08
     e74:	19 86       	std	Y+9, r1	; 0x09
     e76:	1a 86       	std	Y+10, r1	; 0x0a
	u8  L_u8_Temp1;
	u32 L_u32_Temp2;

	for(u8 counter = 0 ; counter <=3 ; counter++)
     e78:	19 82       	std	Y+1, r1	; 0x01
     e7a:	3c c0       	rjmp	.+120    	; 0xef4 <MUART_u32ReceiveNumber+0x98>
	{
		L_u8_Temp1 =  MUART_u8Receive();
     e7c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
     e80:	8e 83       	std	Y+6, r24	; 0x06

		L_u32_Temp2 = L_u8_Temp1;
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	9b 83       	std	Y+3, r25	; 0x03
     e90:	ac 83       	std	Y+4, r26	; 0x04
     e92:	bd 83       	std	Y+5, r27	; 0x05


		L_u32_Temp2 = L_u32_Temp2 << ((3-counter)*8);
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	82 1b       	sub	r24, r18
     ea0:	93 0b       	sbc	r25, r19
     ea2:	9c 01       	movw	r18, r24
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	ac 81       	ldd	r26, Y+4	; 0x04
     eb6:	bd 81       	ldd	r27, Y+5	; 0x05
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <MUART_u32ReceiveNumber+0x66>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	aa 1f       	adc	r26, r26
     ec0:	bb 1f       	adc	r27, r27
     ec2:	2a 95       	dec	r18
     ec4:	d2 f7       	brpl	.-12     	; 0xeba <MUART_u32ReceiveNumber+0x5e>
     ec6:	8a 83       	std	Y+2, r24	; 0x02
     ec8:	9b 83       	std	Y+3, r25	; 0x03
     eca:	ac 83       	std	Y+4, r26	; 0x04
     ecc:	bd 83       	std	Y+5, r27	; 0x05


		L_u32_ReceivedData += L_u32_Temp2;
     ece:	2f 81       	ldd	r18, Y+7	; 0x07
     ed0:	38 85       	ldd	r19, Y+8	; 0x08
     ed2:	49 85       	ldd	r20, Y+9	; 0x09
     ed4:	5a 85       	ldd	r21, Y+10	; 0x0a
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	ac 81       	ldd	r26, Y+4	; 0x04
     edc:	bd 81       	ldd	r27, Y+5	; 0x05
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	a4 1f       	adc	r26, r20
     ee4:	b5 1f       	adc	r27, r21
     ee6:	8f 83       	std	Y+7, r24	; 0x07
     ee8:	98 87       	std	Y+8, r25	; 0x08
     eea:	a9 87       	std	Y+9, r26	; 0x09
     eec:	ba 87       	std	Y+10, r27	; 0x0a
{
	u32 L_u32_ReceivedData=0;
	u8  L_u8_Temp1;
	u32 L_u32_Temp2;

	for(u8 counter = 0 ; counter <=3 ; counter++)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	08 f4       	brcc	.+2      	; 0xefc <MUART_u32ReceiveNumber+0xa0>
     efa:	c0 cf       	rjmp	.-128    	; 0xe7c <MUART_u32ReceiveNumber+0x20>


		L_u32_ReceivedData += L_u32_Temp2;

	}
return L_u32_ReceivedData;
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	a9 85       	ldd	r26, Y+9	; 0x09
     f02:	ba 85       	ldd	r27, Y+10	; 0x0a
}
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	2a 96       	adiw	r28, 0x0a	; 10
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <MEXTI_VoidSenseControl>:
 */

#include "EXTI_Init.h"

void MEXTI_VoidSenseControl(u8 A_u8_EXTI_Line, u8 A_u8_EXTI_Sense)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	2a 97       	sbiw	r28, 0x0a	; 10
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_EXTI_Line)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3a 87       	std	Y+10, r19	; 0x0a
     f3a:	29 87       	std	Y+9, r18	; 0x09
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <MEXTI_VoidSenseControl+0x2e>
     f46:	66 c0       	rjmp	.+204    	; 0x1014 <MEXTI_VoidSenseControl+0xfa>
     f48:	29 85       	ldd	r18, Y+9	; 0x09
     f4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <MEXTI_VoidSenseControl+0x3a>
     f52:	bb c0       	rjmp	.+374    	; 0x10ca <MEXTI_VoidSenseControl+0x1b0>
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	09 f0       	breq	.+2      	; 0xf5e <MEXTI_VoidSenseControl+0x44>
     f5c:	d5 c0       	rjmp	.+426    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
	{
	case EXTI_Line0 :
		switch (A_u8_EXTI_Sense)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	38 87       	std	Y+8, r19	; 0x08
     f66:	2f 83       	std	Y+7, r18	; 0x07
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	98 85       	ldd	r25, Y+8	; 0x08
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	21 f1       	breq	.+72     	; 0xfba <MEXTI_VoidSenseControl+0xa0>
     f72:	2f 81       	ldd	r18, Y+7	; 0x07
     f74:	38 85       	ldd	r19, Y+8	; 0x08
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <MEXTI_VoidSenseControl+0x6c>
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	98 85       	ldd	r25, Y+8	; 0x08
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f0       	breq	.+24     	; 0xf9c <MEXTI_VoidSenseControl+0x82>
     f84:	c1 c0       	rjmp	.+386    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
     f86:	2f 81       	ldd	r18, Y+7	; 0x07
     f88:	38 85       	ldd	r19, Y+8	; 0x08
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	21 f1       	breq	.+72     	; 0xfd8 <MEXTI_VoidSenseControl+0xbe>
     f90:	8f 81       	ldd	r24, Y+7	; 0x07
     f92:	98 85       	ldd	r25, Y+8	; 0x08
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	71 f1       	breq	.+92     	; 0xff6 <MEXTI_VoidSenseControl+0xdc>
     f9a:	b6 c0       	rjmp	.+364    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
		{
		case (EXTI_Low):
			CLR_BIT(MCUCR,0);
     f9c:	a5 e5       	ldi	r26, 0x55	; 85
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e5 e5       	ldi	r30, 0x55	; 85
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     faa:	a5 e5       	ldi	r26, 0x55	; 85
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e5       	ldi	r30, 0x55	; 85
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
     fb8:	a7 c0       	rjmp	.+334    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Change):
			SET_BIT(MCUCR,0);
     fba:	a5 e5       	ldi	r26, 0x55	; 85
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e5       	ldi	r30, 0x55	; 85
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     fc8:	a5 e5       	ldi	r26, 0x55	; 85
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e5       	ldi	r30, 0x55	; 85
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	8c 93       	st	X, r24
     fd6:	98 c0       	rjmp	.+304    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Falling):
			CLR_BIT(MCUCR,0);
     fd8:	a5 e5       	ldi	r26, 0x55	; 85
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e5       	ldi	r30, 0x55	; 85
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8e 7f       	andi	r24, 0xFE	; 254
     fe4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     fe6:	a5 e5       	ldi	r26, 0x55	; 85
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e5       	ldi	r30, 0x55	; 85
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	8c 93       	st	X, r24
     ff4:	89 c0       	rjmp	.+274    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Rising):
			SET_BIT(MCUCR,0);
     ff6:	a5 e5       	ldi	r26, 0x55	; 85
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e5       	ldi	r30, 0x55	; 85
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	81 60       	ori	r24, 0x01	; 1
    1002:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1004:	a5 e5       	ldi	r26, 0x55	; 85
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e5       	ldi	r30, 0x55	; 85
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	82 60       	ori	r24, 0x02	; 2
    1010:	8c 93       	st	X, r24
    1012:	7a c0       	rjmp	.+244    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
		}
		break;


	case EXTI_Line1 :
		switch (A_u8_EXTI_Sense)
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3e 83       	std	Y+6, r19	; 0x06
    101c:	2d 83       	std	Y+5, r18	; 0x05
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	91 05       	cpc	r25, r1
    1026:	21 f1       	breq	.+72     	; 0x1070 <MEXTI_VoidSenseControl+0x156>
    1028:	2d 81       	ldd	r18, Y+5	; 0x05
    102a:	3e 81       	ldd	r19, Y+6	; 0x06
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	2c f4       	brge	.+10     	; 0x103c <MEXTI_VoidSenseControl+0x122>
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	61 f0       	breq	.+24     	; 0x1052 <MEXTI_VoidSenseControl+0x138>
    103a:	66 c0       	rjmp	.+204    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
    103c:	2d 81       	ldd	r18, Y+5	; 0x05
    103e:	3e 81       	ldd	r19, Y+6	; 0x06
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	21 f1       	breq	.+72     	; 0x108e <MEXTI_VoidSenseControl+0x174>
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	71 f1       	breq	.+92     	; 0x10ac <MEXTI_VoidSenseControl+0x192>
    1050:	5b c0       	rjmp	.+182    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
		{
		case (EXTI_Low):
			CLR_BIT(MCUCR,2);
    1052:	a5 e5       	ldi	r26, 0x55	; 85
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e5       	ldi	r30, 0x55	; 85
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8b 7f       	andi	r24, 0xFB	; 251
    105e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	87 7f       	andi	r24, 0xF7	; 247
    106c:	8c 93       	st	X, r24
    106e:	4c c0       	rjmp	.+152    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Change):
			SET_BIT(MCUCR,2);
    1070:	a5 e5       	ldi	r26, 0x55	; 85
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e5       	ldi	r30, 0x55	; 85
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    107e:	a5 e5       	ldi	r26, 0x55	; 85
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e5       	ldi	r30, 0x55	; 85
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	8c 93       	st	X, r24
    108c:	3d c0       	rjmp	.+122    	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Falling):
			CLR_BIT(MCUCR,2);
    108e:	a5 e5       	ldi	r26, 0x55	; 85
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e5       	ldi	r30, 0x55	; 85
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8b 7f       	andi	r24, 0xFB	; 251
    109a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    109c:	a5 e5       	ldi	r26, 0x55	; 85
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e5 e5       	ldi	r30, 0x55	; 85
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	8c 93       	st	X, r24
    10aa:	2e c0       	rjmp	.+92     	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Rising):
			SET_BIT(MCUCR,2);
    10ac:	a5 e5       	ldi	r26, 0x55	; 85
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e5       	ldi	r30, 0x55	; 85
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	84 60       	ori	r24, 0x04	; 4
    10b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    10ba:	a5 e5       	ldi	r26, 0x55	; 85
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e5 e5       	ldi	r30, 0x55	; 85
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	88 60       	ori	r24, 0x08	; 8
    10c6:	8c 93       	st	X, r24
    10c8:	1f c0       	rjmp	.+62     	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;
		}
		break;

	case EXTI_Line2 :
		switch (A_u8_EXTI_Sense)
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3c 83       	std	Y+4, r19	; 0x04
    10d2:	2b 83       	std	Y+3, r18	; 0x03
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	91 05       	cpc	r25, r1
    10dc:	31 f0       	breq	.+12     	; 0x10ea <MEXTI_VoidSenseControl+0x1d0>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	23 30       	cpi	r18, 0x03	; 3
    10e4:	31 05       	cpc	r19, r1
    10e6:	49 f0       	breq	.+18     	; 0x10fa <MEXTI_VoidSenseControl+0x1e0>
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
		{
		case (EXTI_Falling):
			CLR_BIT(MCUCSR,6);
    10ea:	a4 e5       	ldi	r26, 0x54	; 84
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e4 e5       	ldi	r30, 0x54	; 84
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 7b       	andi	r24, 0xBF	; 191
    10f6:	8c 93       	st	X, r24
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <MEXTI_VoidSenseControl+0x1ee>
			break;

		case (EXTI_Rising):
			SET_BIT(MCUCSR,6);
    10fa:	a4 e5       	ldi	r26, 0x54	; 84
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e4 e5       	ldi	r30, 0x54	; 84
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	8c 93       	st	X, r24
		}
		break;


	}
}
    1108:	2a 96       	adiw	r28, 0x0a	; 10
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <MEXTI_VoidEnable>:


void MEXTI_VoidEnable(u8 A_u8_EXTI_Line)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <MEXTI_VoidEnable+0x6>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8_EXTI_Line)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3b 83       	std	Y+3, r19	; 0x03
    1130:	2a 83       	std	Y+2, r18	; 0x02
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	89 f0       	breq	.+34     	; 0x115e <MEXTI_VoidEnable+0x44>
    113c:	2a 81       	ldd	r18, Y+2	; 0x02
    113e:	3b 81       	ldd	r19, Y+3	; 0x03
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	a1 f0       	breq	.+40     	; 0x116e <MEXTI_VoidEnable+0x54>
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	b9 f4       	brne	.+46     	; 0x117c <MEXTI_VoidEnable+0x62>
	{
	case(EXTI_Line0): SET_BIT(GICR,6); break;
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	8c 93       	st	X, r24
    115c:	0f c0       	rjmp	.+30     	; 0x117c <MEXTI_VoidEnable+0x62>
	case(EXTI_Line1): SET_BIT(GICR,7); break;
    115e:	ab e5       	ldi	r26, 0x5B	; 91
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	eb e5       	ldi	r30, 0x5B	; 91
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	8c 93       	st	X, r24
    116c:	07 c0       	rjmp	.+14     	; 0x117c <MEXTI_VoidEnable+0x62>
	case(EXTI_Line2): SET_BIT(GICR,5); break;
    116e:	ab e5       	ldi	r26, 0x5B	; 91
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	eb e5       	ldi	r30, 0x5B	; 91
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	80 62       	ori	r24, 0x20	; 32
    117a:	8c 93       	st	X, r24
	}
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <MEXTI_VoidDisable>:

void MEXTI_VoidDisable(u8 A_u8_EXTI_Line)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <MEXTI_VoidDisable+0x6>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8_EXTI_Line)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3b 83       	std	Y+3, r19	; 0x03
    119e:	2a 83       	std	Y+2, r18	; 0x02
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	89 f0       	breq	.+34     	; 0x11cc <MEXTI_VoidDisable+0x44>
    11aa:	2a 81       	ldd	r18, Y+2	; 0x02
    11ac:	3b 81       	ldd	r19, Y+3	; 0x03
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	a1 f0       	breq	.+40     	; 0x11dc <MEXTI_VoidDisable+0x54>
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	b9 f4       	brne	.+46     	; 0x11ea <MEXTI_VoidDisable+0x62>
	{
	case(EXTI_Line0): CLR_BIT(GICR,6); break;
    11bc:	ab e5       	ldi	r26, 0x5B	; 91
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e5       	ldi	r30, 0x5B	; 91
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 7b       	andi	r24, 0xBF	; 191
    11c8:	8c 93       	st	X, r24
    11ca:	0f c0       	rjmp	.+30     	; 0x11ea <MEXTI_VoidDisable+0x62>
	case(EXTI_Line1): CLR_BIT(GICR,7); break; break;
    11cc:	ab e5       	ldi	r26, 0x5B	; 91
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb e5       	ldi	r30, 0x5B	; 91
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	8c 93       	st	X, r24
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <MEXTI_VoidDisable+0x62>
	case(EXTI_Line2): CLR_BIT(GICR,5);
    11dc:	ab e5       	ldi	r26, 0x5B	; 91
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	eb e5       	ldi	r30, 0x5B	; 91
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 7d       	andi	r24, 0xDF	; 223
    11e8:	8c 93       	st	X, r24
	}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <MGIE_VoidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"


void MGIE_VoidEnable()
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    11fe:	af e5       	ldi	r26, 0x5F	; 95
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ef e5       	ldi	r30, 0x5F	; 95
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
}
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <MGIE_VoidDisable>:
void MGIE_VoidDisable()
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    121a:	af e5       	ldi	r26, 0x5F	; 95
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ef e5       	ldi	r30, 0x5F	; 95
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 68       	ori	r24, 0x80	; 128
    1226:	8c 93       	st	X, r24
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <MDIO_voidSetPortDirection>:
#include "DIO_Init.h"



void MDIO_voidSetPortDirection(u8 A_u8_PortNum, u8 A_u8_PortDirection)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <MDIO_voidSetPortDirection+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <MDIO_voidSetPortDirection+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8_PortNum <= PORTD  &&  A_u8_PortDirection <= 0xff)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	90 f5       	brcc	.+100    	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_u8_PortNum)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f0       	breq	.+52     	; 0x128c <MDIO_voidSetPortDirection+0x5e>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <MDIO_voidSetPortDirection+0x3e>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <MDIO_voidSetPortDirection+0x54>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <MDIO_voidSetPortDirection+0x68>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <MDIO_voidSetPortDirection+0x72>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
		{
		case PORTA : DIO_DDRA_REG = A_u8_PortDirection; break;
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
		case PORTB : DIO_DDRB_REG = A_u8_PortDirection; break;
    128c:	e7 e3       	ldi	r30, 0x37	; 55
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
		case PORTC : DIO_DDRC_REG = A_u8_PortDirection; break;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
		case PORTD : DIO_DDRD_REG = A_u8_PortDirection; break;
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
		}
	}
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8_PortNum, u8 A_u8_PortValue)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <MDIO_voidSetPortValue+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <MDIO_voidSetPortValue+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8_PortNum <= PORTD  &&  A_u8_PortValue <= 0xff)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	90 f5       	brcc	.+100    	; 0x1330 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_u8_PortNum)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3c 83       	std	Y+4, r19	; 0x04
    12d4:	2b 83       	std	Y+3, r18	; 0x03
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	d1 f0       	breq	.+52     	; 0x1314 <MDIO_voidSetPortValue+0x5e>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <MDIO_voidSetPortValue+0x3e>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 f0       	breq	.+24     	; 0x130a <MDIO_voidSetPortValue+0x54>
    12f2:	1e c0       	rjmp	.+60     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <MDIO_voidSetPortValue+0x68>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <MDIO_voidSetPortValue+0x72>
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
		{
		case PORTA : DIO_PORTA_REG = A_u8_PortValue; break;
    130a:	eb e3       	ldi	r30, 0x3B	; 59
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
		case PORTB : DIO_PORTB_REG = A_u8_PortValue; break;
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
		case PORTC : DIO_PORTC_REG = A_u8_PortValue; break;
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <MDIO_voidSetPortValue+0x7a>
		case PORTD : DIO_PORTD_REG = A_u8_PortValue; break;
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
		}
	}
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <MDIO_voidSetPinDirection>:
void MDIO_voidSetPinDirection(u8 A_u8_PortNum, u8 A_u8_PinNum, u8 A_u8_PinDirection)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	2d 97       	sbiw	r28, 0x0d	; 13
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
    1356:	4b 83       	std	Y+3, r20	; 0x03
	if( A_u8_PortNum <= PORTA && A_u8_PinNum<= PIN7 && A_u8_PinDirection <= OUTPUT)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	88 23       	and	r24, r24
    135c:	09 f0       	breq	.+2      	; 0x1360 <MDIO_voidSetPinDirection+0x22>
    135e:	09 c1       	rjmp	.+530    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	88 30       	cpi	r24, 0x08	; 8
    1364:	08 f0       	brcs	.+2      	; 0x1368 <MDIO_voidSetPinDirection+0x2a>
    1366:	05 c1       	rjmp	.+522    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	08 f0       	brcs	.+2      	; 0x1370 <MDIO_voidSetPinDirection+0x32>
    136e:	01 c1       	rjmp	.+514    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_u8_PortNum)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3d 87       	std	Y+13, r19	; 0x0d
    1378:	2c 87       	std	Y+12, r18	; 0x0c
    137a:	8c 85       	ldd	r24, Y+12	; 0x0c
    137c:	9d 85       	ldd	r25, Y+13	; 0x0d
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <MDIO_voidSetPinDirection+0x48>
    1384:	4f c0       	rjmp	.+158    	; 0x1424 <MDIO_voidSetPinDirection+0xe6>
    1386:	2c 85       	ldd	r18, Y+12	; 0x0c
    1388:	3d 85       	ldd	r19, Y+13	; 0x0d
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <MDIO_voidSetPinDirection+0x5c>
    1390:	8c 85       	ldd	r24, Y+12	; 0x0c
    1392:	9d 85       	ldd	r25, Y+13	; 0x0d
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	71 f0       	breq	.+28     	; 0x13b4 <MDIO_voidSetPinDirection+0x76>
    1398:	ec c0       	rjmp	.+472    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
    139a:	2c 85       	ldd	r18, Y+12	; 0x0c
    139c:	3d 85       	ldd	r19, Y+13	; 0x0d
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <MDIO_voidSetPinDirection+0x68>
    13a4:	77 c0       	rjmp	.+238    	; 0x1494 <MDIO_voidSetPinDirection+0x156>
    13a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <MDIO_voidSetPinDirection+0x74>
    13b0:	a9 c0       	rjmp	.+338    	; 0x1504 <MDIO_voidSetPinDirection+0x1c6>
    13b2:	df c0       	rjmp	.+446    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
		{
			case PORTA:

				switch (A_u8_PinDirection)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3b 87       	std	Y+11, r19	; 0x0b
    13bc:	2a 87       	std	Y+10, r18	; 0x0a
    13be:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <MDIO_voidSetPinDirection+0x94>
    13c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    13c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    13ca:	21 30       	cpi	r18, 0x01	; 1
    13cc:	31 05       	cpc	r19, r1
    13ce:	b1 f0       	breq	.+44     	; 0x13fc <MDIO_voidSetPinDirection+0xbe>
    13d0:	d0 c0       	rjmp	.+416    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRA_REG,A_u8_PinNum);break;
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_voidSetPinDirection+0xb2>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_voidSetPinDirection+0xae>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	bb c0       	rjmp	.+374    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRA_REG,A_u8_PinNum);break;
    13fc:	aa e3       	ldi	r26, 0x3A	; 58
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e3       	ldi	r30, 0x3A	; 58
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <MDIO_voidSetPinDirection+0xdc>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <MDIO_voidSetPinDirection+0xd8>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	a7 c0       	rjmp	.+334    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
			break;


			case PORTB:

				switch (A_u8_PinDirection)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	39 87       	std	Y+9, r19	; 0x09
    142c:	28 87       	std	Y+8, r18	; 0x08
    142e:	88 85       	ldd	r24, Y+8	; 0x08
    1430:	99 85       	ldd	r25, Y+9	; 0x09
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	31 f0       	breq	.+12     	; 0x1442 <MDIO_voidSetPinDirection+0x104>
    1436:	28 85       	ldd	r18, Y+8	; 0x08
    1438:	39 85       	ldd	r19, Y+9	; 0x09
    143a:	21 30       	cpi	r18, 0x01	; 1
    143c:	31 05       	cpc	r19, r1
    143e:	b1 f0       	breq	.+44     	; 0x146c <MDIO_voidSetPinDirection+0x12e>
    1440:	98 c0       	rjmp	.+304    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRB_REG,A_u8_PinNum);break;
    1442:	a7 e3       	ldi	r26, 0x37	; 55
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <MDIO_voidSetPinDirection+0x122>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <MDIO_voidSetPinDirection+0x11e>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	83 c0       	rjmp	.+262    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRB_REG,A_u8_PinNum);break;
    146c:	a7 e3       	ldi	r26, 0x37	; 55
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e7 e3       	ldi	r30, 0x37	; 55
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <MDIO_voidSetPinDirection+0x14c>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <MDIO_voidSetPinDirection+0x148>
    148e:	84 2b       	or	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	6f c0       	rjmp	.+222    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
			break;


			case PORTC:

				switch (A_u8_PinDirection)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3f 83       	std	Y+7, r19	; 0x07
    149c:	2e 83       	std	Y+6, r18	; 0x06
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
    14a0:	9f 81       	ldd	r25, Y+7	; 0x07
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	31 f0       	breq	.+12     	; 0x14b2 <MDIO_voidSetPinDirection+0x174>
    14a6:	2e 81       	ldd	r18, Y+6	; 0x06
    14a8:	3f 81       	ldd	r19, Y+7	; 0x07
    14aa:	21 30       	cpi	r18, 0x01	; 1
    14ac:	31 05       	cpc	r19, r1
    14ae:	b1 f0       	breq	.+44     	; 0x14dc <MDIO_voidSetPinDirection+0x19e>
    14b0:	60 c0       	rjmp	.+192    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRC_REG,A_u8_PinNum);break;
    14b2:	a4 e3       	ldi	r26, 0x34	; 52
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <MDIO_voidSetPinDirection+0x192>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <MDIO_voidSetPinDirection+0x18e>
    14d4:	80 95       	com	r24
    14d6:	84 23       	and	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	4b c0       	rjmp	.+150    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRC_REG,A_u8_PinNum);break;
    14dc:	a4 e3       	ldi	r26, 0x34	; 52
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e4 e3       	ldi	r30, 0x34	; 52
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <MDIO_voidSetPinDirection+0x1bc>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <MDIO_voidSetPinDirection+0x1b8>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	37 c0       	rjmp	.+110    	; 0x1572 <MDIO_voidSetPinDirection+0x234>
			break;


			case PORTD:

				switch (A_u8_PinDirection)
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3d 83       	std	Y+5, r19	; 0x05
    150c:	2c 83       	std	Y+4, r18	; 0x04
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	31 f0       	breq	.+12     	; 0x1522 <MDIO_voidSetPinDirection+0x1e4>
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	21 30       	cpi	r18, 0x01	; 1
    151c:	31 05       	cpc	r19, r1
    151e:	b1 f0       	breq	.+44     	; 0x154c <MDIO_voidSetPinDirection+0x20e>
    1520:	28 c0       	rjmp	.+80     	; 0x1572 <MDIO_voidSetPinDirection+0x234>
				{
					case INPUT  : CLR_BIT(DIO_DDRD_REG,A_u8_PinNum);break;
    1522:	a1 e3       	ldi	r26, 0x31	; 49
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <MDIO_voidSetPinDirection+0x202>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <MDIO_voidSetPinDirection+0x1fe>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <MDIO_voidSetPinDirection+0x234>
					case OUTPUT : SET_BIT(DIO_DDRD_REG,A_u8_PinNum);break;
    154c:	a1 e3       	ldi	r26, 0x31	; 49
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e1 e3       	ldi	r30, 0x31	; 49
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <MDIO_voidSetPinDirection+0x22c>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <MDIO_voidSetPinDirection+0x228>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
				}
			break;

		}
	}
}
    1572:	2d 96       	adiw	r28, 0x0d	; 13
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8_PortNum, u8 A_u8_PinNum, u8 A_u8_PinValue)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	2d 97       	sbiw	r28, 0x0d	; 13
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	6a 83       	std	Y+2, r22	; 0x02
    159c:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8_PortNum <= PORTD && A_u8_PinNum <= PIN7 && A_u8_PinValue <= HIGH)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <MDIO_voidSetPinValue+0x22>
    15a4:	09 c1       	rjmp	.+530    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 30       	cpi	r24, 0x08	; 8
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <MDIO_voidSetPinValue+0x2a>
    15ac:	05 c1       	rjmp	.+522    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <MDIO_voidSetPinValue+0x32>
    15b4:	01 c1       	rjmp	.+514    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
	{
		switch(A_u8_PortNum)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 87       	std	Y+13, r19	; 0x0d
    15be:	2c 87       	std	Y+12, r18	; 0x0c
    15c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <MDIO_voidSetPinValue+0x48>
    15ca:	4f c0       	rjmp	.+158    	; 0x166a <MDIO_voidSetPinValue+0xe6>
    15cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <MDIO_voidSetPinValue+0x5c>
    15d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	71 f0       	breq	.+28     	; 0x15fa <MDIO_voidSetPinValue+0x76>
    15de:	ec c0       	rjmp	.+472    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
    15e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <MDIO_voidSetPinValue+0x68>
    15ea:	77 c0       	rjmp	.+238    	; 0x16da <MDIO_voidSetPinValue+0x156>
    15ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	91 05       	cpc	r25, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <MDIO_voidSetPinValue+0x74>
    15f6:	a9 c0       	rjmp	.+338    	; 0x174a <MDIO_voidSetPinValue+0x1c6>
    15f8:	df c0       	rjmp	.+446    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
		{
			case PORTA:

				switch (A_u8_PinValue)
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3b 87       	std	Y+11, r19	; 0x0b
    1602:	2a 87       	std	Y+10, r18	; 0x0a
    1604:	8a 85       	ldd	r24, Y+10	; 0x0a
    1606:	9b 85       	ldd	r25, Y+11	; 0x0b
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	31 f0       	breq	.+12     	; 0x1618 <MDIO_voidSetPinValue+0x94>
    160c:	2a 85       	ldd	r18, Y+10	; 0x0a
    160e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1610:	21 30       	cpi	r18, 0x01	; 1
    1612:	31 05       	cpc	r19, r1
    1614:	b1 f0       	breq	.+44     	; 0x1642 <MDIO_voidSetPinValue+0xbe>
    1616:	d0 c0       	rjmp	.+416    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTA_REG,A_u8_PinNum);break;
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <MDIO_voidSetPinValue+0xb2>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <MDIO_voidSetPinValue+0xae>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	bb c0       	rjmp	.+374    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTA_REG,A_u8_PinNum);break;
    1642:	ab e3       	ldi	r26, 0x3B	; 59
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <MDIO_voidSetPinValue+0xdc>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <MDIO_voidSetPinValue+0xd8>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	a7 c0       	rjmp	.+334    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
			break;


			case PORTB:

				switch (A_u8_PinValue)
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	39 87       	std	Y+9, r19	; 0x09
    1672:	28 87       	std	Y+8, r18	; 0x08
    1674:	88 85       	ldd	r24, Y+8	; 0x08
    1676:	99 85       	ldd	r25, Y+9	; 0x09
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	31 f0       	breq	.+12     	; 0x1688 <MDIO_voidSetPinValue+0x104>
    167c:	28 85       	ldd	r18, Y+8	; 0x08
    167e:	39 85       	ldd	r19, Y+9	; 0x09
    1680:	21 30       	cpi	r18, 0x01	; 1
    1682:	31 05       	cpc	r19, r1
    1684:	b1 f0       	breq	.+44     	; 0x16b2 <MDIO_voidSetPinValue+0x12e>
    1686:	98 c0       	rjmp	.+304    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTB_REG,A_u8_PinNum);break;
    1688:	a8 e3       	ldi	r26, 0x38	; 56
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e8 e3       	ldi	r30, 0x38	; 56
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_voidSetPinValue+0x122>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_voidSetPinValue+0x11e>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	83 c0       	rjmp	.+262    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTB_REG,A_u8_PinNum);break;
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <MDIO_voidSetPinValue+0x14c>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <MDIO_voidSetPinValue+0x148>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	6f c0       	rjmp	.+222    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
			break;


			case PORTC:

				switch (A_u8_PinValue)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3f 83       	std	Y+7, r19	; 0x07
    16e2:	2e 83       	std	Y+6, r18	; 0x06
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	9f 81       	ldd	r25, Y+7	; 0x07
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <MDIO_voidSetPinValue+0x174>
    16ec:	2e 81       	ldd	r18, Y+6	; 0x06
    16ee:	3f 81       	ldd	r19, Y+7	; 0x07
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	b1 f0       	breq	.+44     	; 0x1722 <MDIO_voidSetPinValue+0x19e>
    16f6:	60 c0       	rjmp	.+192    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTC_REG,A_u8_PinNum);break;
    16f8:	a5 e3       	ldi	r26, 0x35	; 53
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e3       	ldi	r30, 0x35	; 53
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <MDIO_voidSetPinValue+0x192>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <MDIO_voidSetPinValue+0x18e>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	4b c0       	rjmp	.+150    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTC_REG,A_u8_PinNum);break;
    1722:	a5 e3       	ldi	r26, 0x35	; 53
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e3       	ldi	r30, 0x35	; 53
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <MDIO_voidSetPinValue+0x1bc>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <MDIO_voidSetPinValue+0x1b8>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	37 c0       	rjmp	.+110    	; 0x17b8 <MDIO_voidSetPinValue+0x234>
			break;


			case PORTD:

				switch (A_u8_PinValue)
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3d 83       	std	Y+5, r19	; 0x05
    1752:	2c 83       	std	Y+4, r18	; 0x04
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	31 f0       	breq	.+12     	; 0x1768 <MDIO_voidSetPinValue+0x1e4>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	21 30       	cpi	r18, 0x01	; 1
    1762:	31 05       	cpc	r19, r1
    1764:	b1 f0       	breq	.+44     	; 0x1792 <MDIO_voidSetPinValue+0x20e>
    1766:	28 c0       	rjmp	.+80     	; 0x17b8 <MDIO_voidSetPinValue+0x234>
					{
						case LOW  : CLR_BIT(DIO_PORTD_REG,A_u8_PinNum);break;
    1768:	a2 e3       	ldi	r26, 0x32	; 50
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e2 e3       	ldi	r30, 0x32	; 50
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <MDIO_voidSetPinValue+0x202>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <MDIO_voidSetPinValue+0x1fe>
    178a:	80 95       	com	r24
    178c:	84 23       	and	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <MDIO_voidSetPinValue+0x234>
						case HIGH : SET_BIT(DIO_PORTD_REG,A_u8_PinNum);break;
    1792:	a2 e3       	ldi	r26, 0x32	; 50
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e2 e3       	ldi	r30, 0x32	; 50
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <MDIO_voidSetPinValue+0x22c>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <MDIO_voidSetPinValue+0x228>
    17b4:	84 2b       	or	r24, r20
    17b6:	8c 93       	st	X, r24
					}
			break;
		}
	}
}
    17b8:	2d 96       	adiw	r28, 0x0d	; 13
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8_PortNum, u8 A_u8_PinNum)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <MDIO_u8GetPinValue+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MDIO_u8GetPinValue+0x8>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8_Pinvalue=6;
    17dc:	86 e0       	ldi	r24, 0x06	; 6
    17de:	89 83       	std	Y+1, r24	; 0x01

	if( A_u8_PortNum <= PORTD && A_u8_PinNum <= PIN7)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <MDIO_u8GetPinValue+0x1e>
    17e6:	6b c0       	rjmp	.+214    	; 0x18be <MDIO_u8GetPinValue+0xf4>
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 30       	cpi	r24, 0x08	; 8
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <MDIO_u8GetPinValue+0x26>
    17ee:	67 c0       	rjmp	.+206    	; 0x18be <MDIO_u8GetPinValue+0xf4>
	{

		switch(A_u8_PortNum)
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	3d 83       	std	Y+5, r19	; 0x05
    17f8:	2c 83       	std	Y+4, r18	; 0x04
    17fa:	4c 81       	ldd	r20, Y+4	; 0x04
    17fc:	5d 81       	ldd	r21, Y+5	; 0x05
    17fe:	41 30       	cpi	r20, 0x01	; 1
    1800:	51 05       	cpc	r21, r1
    1802:	41 f1       	breq	.+80     	; 0x1854 <MDIO_u8GetPinValue+0x8a>
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	91 05       	cpc	r25, r1
    180c:	34 f4       	brge	.+12     	; 0x181a <MDIO_u8GetPinValue+0x50>
    180e:	2c 81       	ldd	r18, Y+4	; 0x04
    1810:	3d 81       	ldd	r19, Y+5	; 0x05
    1812:	21 15       	cp	r18, r1
    1814:	31 05       	cpc	r19, r1
    1816:	61 f0       	breq	.+24     	; 0x1830 <MDIO_u8GetPinValue+0x66>
    1818:	52 c0       	rjmp	.+164    	; 0x18be <MDIO_u8GetPinValue+0xf4>
    181a:	4c 81       	ldd	r20, Y+4	; 0x04
    181c:	5d 81       	ldd	r21, Y+5	; 0x05
    181e:	42 30       	cpi	r20, 0x02	; 2
    1820:	51 05       	cpc	r21, r1
    1822:	51 f1       	breq	.+84     	; 0x1878 <MDIO_u8GetPinValue+0xae>
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	91 05       	cpc	r25, r1
    182c:	b9 f1       	breq	.+110    	; 0x189c <MDIO_u8GetPinValue+0xd2>
    182e:	47 c0       	rjmp	.+142    	; 0x18be <MDIO_u8GetPinValue+0xf4>
		{
			case PORTA : L_u8_Pinvalue = GET_BIT(DIO_PINA_REG,A_u8_PinNum); break;
    1830:	e9 e3       	ldi	r30, 0x39	; 57
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a9 01       	movw	r20, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <MDIO_u8GetPinValue+0x7e>
    1844:	55 95       	asr	r21
    1846:	47 95       	ror	r20
    1848:	8a 95       	dec	r24
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <MDIO_u8GetPinValue+0x7a>
    184c:	ca 01       	movw	r24, r20
    184e:	81 70       	andi	r24, 0x01	; 1
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	35 c0       	rjmp	.+106    	; 0x18be <MDIO_u8GetPinValue+0xf4>
			case PORTB : L_u8_Pinvalue = GET_BIT(DIO_PINB_REG,A_u8_PinNum); break;
    1854:	e6 e3       	ldi	r30, 0x36	; 54
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <MDIO_u8GetPinValue+0xa2>
    1868:	55 95       	asr	r21
    186a:	47 95       	ror	r20
    186c:	8a 95       	dec	r24
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <MDIO_u8GetPinValue+0x9e>
    1870:	ca 01       	movw	r24, r20
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	23 c0       	rjmp	.+70     	; 0x18be <MDIO_u8GetPinValue+0xf4>
			case PORTC : L_u8_Pinvalue = GET_BIT(DIO_PINC_REG,A_u8_PinNum); break;
    1878:	e3 e3       	ldi	r30, 0x33	; 51
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <MDIO_u8GetPinValue+0xc6>
    188c:	55 95       	asr	r21
    188e:	47 95       	ror	r20
    1890:	8a 95       	dec	r24
    1892:	e2 f7       	brpl	.-8      	; 0x188c <MDIO_u8GetPinValue+0xc2>
    1894:	ca 01       	movw	r24, r20
    1896:	81 70       	andi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	11 c0       	rjmp	.+34     	; 0x18be <MDIO_u8GetPinValue+0xf4>
			case PORTD : L_u8_Pinvalue = GET_BIT(DIO_PIND_REG,A_u8_PinNum); break;
    189c:	e0 e3       	ldi	r30, 0x30	; 48
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <MDIO_u8GetPinValue+0xea>
    18b0:	55 95       	asr	r21
    18b2:	47 95       	ror	r20
    18b4:	8a 95       	dec	r24
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <MDIO_u8GetPinValue+0xe6>
    18b8:	ca 01       	movw	r24, r20
    18ba:	81 70       	andi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return  L_u8_Pinvalue;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <MADC_VoidADCInit>:

#include "ADC_Interface.h"
#include "ADC_Private.h"

void MADC_VoidADCInit(void)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX_REG,REFS1_BIT);
#elif ADC_VREF   ==   AREF_PIN
	CLR_BIT(ADMUX_REG,REFS0_BIT);
	CLR_BIT(ADMUX_REG,REFS1_BIT);
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
    18d8:	a7 e2       	ldi	r26, 0x27	; 39
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e7 e2       	ldi	r30, 0x27	; 39
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 64       	ori	r24, 0x40	; 64
    18e4:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,REFS1_BIT);
    18e6:	a7 e2       	ldi	r26, 0x27	; 39
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e7 e2       	ldi	r30, 0x27	; 39
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 68       	ori	r24, 0x80	; 128
    18f2:	8c 93       	st	X, r24
#endif

	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    18f4:	a7 e2       	ldi	r26, 0x27	; 39
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e7 e2       	ldi	r30, 0x27	; 39
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8f 7d       	andi	r24, 0xDF	; 223
    1900:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#elif ADC_PRESCALER_DV   ==   64
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
    1902:	a6 e2       	ldi	r26, 0x26	; 38
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e6 e2       	ldi	r30, 0x26	; 38
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	8e 7f       	andi	r24, 0xFE	; 254
    190e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1910:	a6 e2       	ldi	r26, 0x26	; 38
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e6 e2       	ldi	r30, 0x26	; 38
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	82 60       	ori	r24, 0x02	; 2
    191c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    191e:	a6 e2       	ldi	r26, 0x26	; 38
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e6 e2       	ldi	r30, 0x26	; 38
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	84 60       	ori	r24, 0x04	; 4
    192a:	8c 93       	st	X, r24
#endif

	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);//
    192c:	a6 e2       	ldi	r26, 0x26	; 38
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e6 e2       	ldi	r30, 0x26	; 38
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 62       	ori	r24, 0x20	; 32
    1938:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    193a:	a6 e2       	ldi	r26, 0x26	; 38
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e6 e2       	ldi	r30, 0x26	; 38
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	80 68       	ori	r24, 0x80	; 128
    1946:	8c 93       	st	X, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);//
    1948:	a6 e2       	ldi	r26, 0x26	; 38
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e6 e2       	ldi	r30, 0x26	; 38
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 64       	ori	r24, 0x40	; 64
    1954:	8c 93       	st	X, r24
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <MADC_VoidADCRead>:

u16  MADC_VoidADCRead(u8 Copy_U8_ADCChannel)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <MADC_VoidADCRead+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <MADC_VoidADCRead+0x8>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	8d 83       	std	Y+5, r24	; 0x05
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | (Copy_U8_ADCChannel & 0x07);
    196c:	a7 e2       	ldi	r26, 0x27	; 39
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e7 e2       	ldi	r30, 0x27	; 39
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	98 2f       	mov	r25, r24
    1978:	90 7e       	andi	r25, 0xE0	; 224
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	87 70       	andi	r24, 0x07	; 7
    197e:	89 2b       	or	r24, r25
    1980:	8c 93       	st	X, r24
	u32 Local_U32_Counter = 0;
    1982:	19 82       	std	Y+1, r1	; 0x01
    1984:	1a 82       	std	Y+2, r1	; 0x02
    1986:	1b 82       	std	Y+3, r1	; 0x03
    1988:	1c 82       	std	Y+4, r1	; 0x04
	while(GET_BIT(ADCSRA_REG,ADIF_BIT) != 1)
    198a:	e6 e2       	ldi	r30, 0x26	; 38
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	82 95       	swap	r24
    1992:	8f 70       	andi	r24, 0x0F	; 15
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	a9 f3       	breq	.-22     	; 0x198a <MADC_VoidADCRead+0x2e>
	{}
	CLR_BIT(ADCSRA_REG,ADIF_BIT);
    19a0:	a6 e2       	ldi	r26, 0x26	; 38
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e6 e2       	ldi	r30, 0x26	; 38
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8f 7e       	andi	r24, 0xEF	; 239
    19ac:	8c 93       	st	X, r24

	return ADCVALUE_REG;
    19ae:	e4 e2       	ldi	r30, 0x24	; 36
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <HSSD_VoidInit>:
				0b01101111   //9
		};


void HSSD_VoidInit(u8 A_u8_SSD_PortNum)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8_SSD_PortNum <= PORTD)
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	84 30       	cpi	r24, 0x04	; 4
    19d6:	20 f4       	brcc	.+8      	; 0x19e0 <HSSD_VoidInit+0x1a>
	{
	MDIO_voidSetPortDirection(A_u8_SSD_PortNum , 0Xff);
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	6f ef       	ldi	r22, 0xFF	; 255
    19dc:	0e 94 17 09 	call	0x122e	; 0x122e <MDIO_voidSetPortDirection>
	}
}
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <HSSD_VoidDisplayNumber>:


void HSSD_VoidDisplayNumber(u8 A_u8_SSD_PortNum ,u8 A_u8_Num)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <HSSD_VoidDisplayNumber+0x6>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8_SSD_PortNum <= PORTD && A_u8_Num <= 9 && A_u8_Num >=0 )
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	70 f4       	brcc	.+28     	; 0x1a18 <HSSD_VoidDisplayNumber+0x30>
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	8a 30       	cpi	r24, 0x0A	; 10
    1a00:	58 f4       	brcc	.+22     	; 0x1a18 <HSSD_VoidDisplayNumber+0x30>
	{
#if SSD_Type==Cathode
	MDIO_voidSetPortValue(A_u8_SSD_PortNum, G_u8_Nums[A_u8_Num]);
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	fc 01       	movw	r30, r24
    1a0a:	ed 5a       	subi	r30, 0xAD	; 173
    1a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0e:	90 81       	ld	r25, Z
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	69 2f       	mov	r22, r25
    1a14:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>

#else
	#error "Define SSD type"
#endif
	}
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <HSSD_VoidTurnOff>:


void HSSD_VoidTurnOff(u8 A_u8_SSD_PortNum)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8_SSD_PortNum <= PORTD)
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	84 30       	cpi	r24, 0x04	; 4
    1a32:	20 f4       	brcc	.+8      	; 0x1a3c <HSSD_VoidTurnOff+0x1a>
	{
		#if SSD_Type==Cathode
			MDIO_voidSetPortValue(A_u8_SSD_PortNum,0x00);
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>

		#else
			#error "Define SSD type"
		#endif
	}
}
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <HSSD_VoidCountUp>:

void HSSD_VoidCountUp(u8 A_u8_SSD_PortNum,u8 A_u8_Num)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <HSSD_VoidCountUp+0x6>
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	8a 83       	std	Y+2, r24	; 0x02
    1a52:	6b 83       	std	Y+3, r22	; 0x03
	if(A_u8_SSD_PortNum <= PORTD && A_u8_Num <= 9 && A_u8_Num >=0 )
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	80 f4       	brcc	.+32     	; 0x1a7a <HSSD_VoidCountUp+0x36>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	8a 30       	cpi	r24, 0x0A	; 10
    1a5e:	68 f4       	brcc	.+26     	; 0x1a7a <HSSD_VoidCountUp+0x36>
	{
		u8 Counter;
		for(Counter=A_u8_Num;Counter<=9;Counter++)
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <HSSD_VoidCountUp+0x30>
		{
			MDIO_voidSetPortValue(A_u8_SSD_PortNum,Counter);
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	69 81       	ldd	r22, Y+1	; 0x01
    1a6a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>
void HSSD_VoidCountUp(u8 A_u8_SSD_PortNum,u8 A_u8_Num)
{
	if(A_u8_SSD_PortNum <= PORTD && A_u8_Num <= 9 && A_u8_Num >=0 )
	{
		u8 Counter;
		for(Counter=A_u8_Num;Counter<=9;Counter++)
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	8f 5f       	subi	r24, 0xFF	; 255
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	8a 30       	cpi	r24, 0x0A	; 10
    1a78:	b0 f3       	brcs	.-20     	; 0x1a66 <HSSD_VoidCountUp+0x22>
		{
			MDIO_voidSetPortValue(A_u8_SSD_PortNum,Counter);
		}
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <HSSD_VoidCountDown>:


void HSSD_VoidCountDown(u8 A_u8_SSD_PortNum,u8 A_u8_Num)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <HSSD_VoidCountDown+0x6>
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	8a 83       	std	Y+2, r24	; 0x02
    1a94:	6b 83       	std	Y+3, r22	; 0x03
	if(A_u8_SSD_PortNum <= PORTD && A_u8_Num <= 9 && A_u8_Num >=0 )
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	68 f4       	brcc	.+26     	; 0x1ab6 <HSSD_VoidCountDown+0x30>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	8a 30       	cpi	r24, 0x0A	; 10
    1aa0:	50 f4       	brcc	.+20     	; 0x1ab6 <HSSD_VoidCountDown+0x30>
	{
		u8 Counter;
		for(Counter=A_u8_Num;Counter>=0;Counter--)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	89 83       	std	Y+1, r24	; 0x01
		{
			MDIO_voidSetPortValue(A_u8_SSD_PortNum,Counter);
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	69 81       	ldd	r22, Y+1	; 0x01
    1aaa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>
void HSSD_VoidCountDown(u8 A_u8_SSD_PortNum,u8 A_u8_Num)
{
	if(A_u8_SSD_PortNum <= PORTD && A_u8_Num <= 9 && A_u8_Num >=0 )
	{
		u8 Counter;
		for(Counter=A_u8_Num;Counter>=0;Counter--)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	81 50       	subi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	f8 cf       	rjmp	.-16     	; 0x1aa6 <HSSD_VoidCountDown+0x20>
		{
			MDIO_voidSetPortValue(A_u8_SSD_PortNum,Counter);
		}
	}
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <HLM35_VoidLM35Init>:


#include "LM35_Init.h"

void HLM35_VoidLM35Init(void)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	MADC_VoidADCInit();
    1aca:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <MADC_VoidADCInit>
}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <HLM35_u16LM35Read>:
u16  HLM35_u16LM35Read(void)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <HLM35_u16LM35Read+0x6>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	u16 Local_U16_Temp = (MADC_VoidADCRead(LM35_PIN) * (u32)500) / 1024;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	0e 94 ae 0c 	call	0x195c	; 0x195c <MADC_VoidADCRead>
    1ae4:	cc 01       	movw	r24, r24
    1ae6:	a0 e0       	ldi	r26, 0x00	; 0
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	24 ef       	ldi	r18, 0xF4	; 244
    1aec:	31 e0       	ldi	r19, 0x01	; 1
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsi3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	07 2e       	mov	r0, r23
    1b00:	7a e0       	ldi	r23, 0x0A	; 10
    1b02:	b6 95       	lsr	r27
    1b04:	a7 95       	ror	r26
    1b06:	97 95       	ror	r25
    1b08:	87 95       	ror	r24
    1b0a:	7a 95       	dec	r23
    1b0c:	d1 f7       	brne	.-12     	; 0x1b02 <HLM35_u16LM35Read+0x2e>
    1b0e:	70 2d       	mov	r23, r0
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
	return Local_U16_Temp;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <HLCD_VoidSendCommand>:
//u8 G_u8_Cursor_Pos  = 0;
//u8 G_u8_Cursor_Line = 0;


void HLCD_VoidSendCommand(u8 A_u8_cmd)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	6d 97       	sbiw	r28, 0x1d	; 29
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	8d 8f       	std	Y+29, r24	; 0x1d
	//Send Command
	MDIO_voidSetPortValue(Data_Port,A_u8_cmd);
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b3c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>

	//Clear RW to send Command
	MDIO_voidSetPinValue(Control_Port,RW_PIN,LOW);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>

	//Clear Rs to send Command
	MDIO_voidSetPinValue(Control_Port,RS_PIN,LOW);
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>

	//Enable On
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,HIGH);
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	89 8f       	std	Y+25, r24	; 0x19
    1b68:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a ef       	ldi	r20, 0xFA	; 250
    1b7c:	54 e4       	ldi	r21, 0x44	; 68
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8d 8b       	std	Y+21, r24	; 0x15
    1b88:	9e 8b       	std	Y+22, r25	; 0x16
    1b8a:	af 8b       	std	Y+23, r26	; 0x17
    1b8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b90:	7e 89       	ldd	r23, Y+22	; 0x16
    1b92:	8f 89       	ldd	r24, Y+23	; 0x17
    1b94:	98 8d       	ldd	r25, Y+24	; 0x18
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c 8b       	std	Y+20, r25	; 0x14
    1bac:	8b 8b       	std	Y+19, r24	; 0x13
    1bae:	3f c0       	rjmp	.+126    	; 0x1c2e <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    1bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	4c f5       	brge	.+82     	; 0x1c1a <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9c 8b       	std	Y+20, r25	; 0x14
    1bee:	8b 8b       	std	Y+19, r24	; 0x13
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <HLCD_VoidSendCommand+0xee>
    1bf2:	88 ec       	ldi	r24, 0xC8	; 200
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9a 8b       	std	Y+18, r25	; 0x12
    1bf8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bfa:	89 89       	ldd	r24, Y+17	; 0x11
    1bfc:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <HLCD_VoidSendCommand+0xdc>
    1c02:	9a 8b       	std	Y+18, r25	; 0x12
    1c04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	8b 89       	ldd	r24, Y+19	; 0x13
    1c08:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	8b 89       	ldd	r24, Y+19	; 0x13
    1c12:	9c 89       	ldd	r25, Y+20	; 0x14
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	69 f7       	brne	.-38     	; 0x1bf2 <HLCD_VoidSendCommand+0xd0>
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c20:	98 8d       	ldd	r25, Y+24	; 0x18
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	98 8b       	std	Y+16, r25	; 0x10
    1c34:	8f 87       	std	Y+15, r24	; 0x0f
    1c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c38:	98 89       	ldd	r25, Y+16	; 0x10
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <HLCD_VoidSendCommand+0x118>
    1c3e:	98 8b       	std	Y+16, r25	; 0x10
    1c40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);


	//Enable oFF
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,LOW);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	8b 87       	std	Y+11, r24	; 0x0b
    1c56:	9c 87       	std	Y+12, r25	; 0x0c
    1c58:	ad 87       	std	Y+13, r26	; 0x0d
    1c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8f 83       	std	Y+7, r24	; 0x07
    1c76:	98 87       	std	Y+8, r25	; 0x08
    1c78:	a9 87       	std	Y+9, r26	; 0x09
    1c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <HLCD_VoidSendCommand+0x1dc>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <HLCD_VoidSendCommand+0x1ca>
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <HLCD_VoidSendCommand+0x1be>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <HLCD_VoidSendCommand+0x206>
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1d30:	6d 96       	adiw	r28, 0x1d	; 29
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <HLCD_VoidSendData>:


void HLCD_VoidSendData(u8 A_u8_Data)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	ab 97       	sbiw	r28, 0x2b	; 43
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	8b a7       	std	Y+43, r24	; 0x2b
	//Send Command
	MDIO_voidSetPortValue(Data_Port,A_u8_Data);
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	6b a5       	ldd	r22, Y+43	; 0x2b
    1d5c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>

	//Clear RW to send Command
	MDIO_voidSetPinValue(Control_Port,RW_PIN,LOW);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>

	//Enable On
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,HIGH);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	62 e0       	ldi	r22, 0x02	; 2
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e8       	ldi	r26, 0x80	; 128
    1d7a:	bf e3       	ldi	r27, 0x3F	; 63
    1d7c:	8f a3       	std	Y+39, r24	; 0x27
    1d7e:	98 a7       	std	Y+40, r25	; 0x28
    1d80:	a9 a7       	std	Y+41, r26	; 0x29
    1d82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	6f a1       	ldd	r22, Y+39	; 0x27
    1d86:	78 a5       	ldd	r23, Y+40	; 0x28
    1d88:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a ef       	ldi	r20, 0xFA	; 250
    1d92:	54 e4       	ldi	r21, 0x44	; 68
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8b a3       	std	Y+35, r24	; 0x23
    1d9e:	9c a3       	std	Y+36, r25	; 0x24
    1da0:	ad a3       	std	Y+37, r26	; 0x25
    1da2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da4:	6b a1       	ldd	r22, Y+35	; 0x23
    1da6:	7c a1       	ldd	r23, Y+36	; 0x24
    1da8:	8d a1       	ldd	r24, Y+37	; 0x25
    1daa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <HLCD_VoidSendData+0x84>
		__ticks = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9a a3       	std	Y+34, r25	; 0x22
    1dc2:	89 a3       	std	Y+33, r24	; 0x21
    1dc4:	3f c0       	rjmp	.+126    	; 0x1e44 <HLCD_VoidSendData+0x102>
	else if (__tmp > 65535)
    1dc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dca:	8d a1       	ldd	r24, Y+37	; 0x25
    1dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	4c f5       	brge	.+82     	; 0x1e30 <HLCD_VoidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dde:	6f a1       	ldd	r22, Y+39	; 0x27
    1de0:	78 a5       	ldd	r23, Y+40	; 0x28
    1de2:	89 a5       	ldd	r24, Y+41	; 0x29
    1de4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <HLCD_VoidSendData+0xe4>
    1e08:	88 ec       	ldi	r24, 0xC8	; 200
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	98 a3       	std	Y+32, r25	; 0x20
    1e0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e12:	98 a1       	ldd	r25, Y+32	; 0x20
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <HLCD_VoidSendData+0xd2>
    1e18:	98 a3       	std	Y+32, r25	; 0x20
    1e1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	9a a3       	std	Y+34, r25	; 0x22
    1e24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	89 a1       	ldd	r24, Y+33	; 0x21
    1e28:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <HLCD_VoidSendData+0xc6>
    1e2e:	14 c0       	rjmp	.+40     	; 0x1e58 <HLCD_VoidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e30:	6b a1       	ldd	r22, Y+35	; 0x23
    1e32:	7c a1       	ldd	r23, Y+36	; 0x24
    1e34:	8d a1       	ldd	r24, Y+37	; 0x25
    1e36:	9e a1       	ldd	r25, Y+38	; 0x26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
    1e44:	89 a1       	ldd	r24, Y+33	; 0x21
    1e46:	9a a1       	ldd	r25, Y+34	; 0x22
    1e48:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <HLCD_VoidSendData+0x10e>
    1e54:	9e 8f       	std	Y+30, r25	; 0x1e
    1e56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Set Rs to send Command
	MDIO_voidSetPinValue(Control_Port,RS_PIN,HIGH);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <HLCD_VoidSendData+0x172>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <HLCD_VoidSendData+0x1f0>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <HLCD_VoidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <HLCD_VoidSendData+0x1d2>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HLCD_VoidSendData+0x1c0>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <HLCD_VoidSendData+0x1b4>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <HLCD_VoidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD_VoidSendData+0x1fc>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	//Enable oFF
	MDIO_voidSetPinValue(Control_Port,ENABLE_PIN,LOW);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	62 e0       	ldi	r22, 0x02	; 2
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e8       	ldi	r26, 0x80	; 128
    1f56:	bf e3       	ldi	r27, 0x3F	; 63
    1f58:	8b 87       	std	Y+11, r24	; 0x0b
    1f5a:	9c 87       	std	Y+12, r25	; 0x0c
    1f5c:	ad 87       	std	Y+13, r26	; 0x0d
    1f5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a ef       	ldi	r20, 0xFA	; 250
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8f 83       	std	Y+7, r24	; 0x07
    1f7a:	98 87       	std	Y+8, r25	; 0x08
    1f7c:	a9 87       	std	Y+9, r26	; 0x09
    1f7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <HLCD_VoidSendData+0x260>
		__ticks = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	3f c0       	rjmp	.+126    	; 0x2020 <HLCD_VoidSendData+0x2de>
	else if (__tmp > 65535)
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	4c f5       	brge	.+82     	; 0x200c <HLCD_VoidSendData+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <HLCD_VoidSendData+0x2c0>
    1fe4:	88 ec       	ldi	r24, 0xC8	; 200
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <HLCD_VoidSendData+0x2ae>
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <HLCD_VoidSendData+0x2a2>
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <HLCD_VoidSendData+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <HLCD_VoidSendData+0x2ea>
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
//	G_u8_Cursor_Pos++;

//	if(G_u8_Cursor_Pos<15)
//	{G_u8_Cursor_Pos -= 16;}

}
    2034:	ab 96       	adiw	r28, 0x2b	; 43
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <HLCD_VoidInit>:


void HLCD_VoidInit(){
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	e8 97       	sbiw	r28, 0x38	; 56
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61

	MDIO_voidSetPortDirection(Data_Port,0XFF);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	6f ef       	ldi	r22, 0xFF	; 255
    205e:	0e 94 17 09 	call	0x122e	; 0x122e <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection(Control_Port,0XFF);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	6f ef       	ldi	r22, 0xFF	; 255
    2066:	0e 94 17 09 	call	0x122e	; 0x122e <MDIO_voidSetPortDirection>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 ef       	ldi	r26, 0xF0	; 240
    2070:	b1 e4       	ldi	r27, 0x41	; 65
    2072:	8d ab       	std	Y+53, r24	; 0x35
    2074:	9e ab       	std	Y+54, r25	; 0x36
    2076:	af ab       	std	Y+55, r26	; 0x37
    2078:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6d a9       	ldd	r22, Y+53	; 0x35
    207c:	7e a9       	ldd	r23, Y+54	; 0x36
    207e:	8f a9       	ldd	r24, Y+55	; 0x37
    2080:	98 ad       	ldd	r25, Y+56	; 0x38
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	89 ab       	std	Y+49, r24	; 0x31
    2094:	9a ab       	std	Y+50, r25	; 0x32
    2096:	ab ab       	std	Y+51, r26	; 0x33
    2098:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    209a:	69 a9       	ldd	r22, Y+49	; 0x31
    209c:	7a a9       	ldd	r23, Y+50	; 0x32
    209e:	8b a9       	ldd	r24, Y+51	; 0x33
    20a0:	9c a9       	ldd	r25, Y+52	; 0x34
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <HLCD_VoidInit+0x76>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <HLCD_VoidInit+0xf4>
	else if (__tmp > 65535)
    20bc:	69 a9       	ldd	r22, Y+49	; 0x31
    20be:	7a a9       	ldd	r23, Y+50	; 0x32
    20c0:	8b a9       	ldd	r24, Y+51	; 0x33
    20c2:	9c a9       	ldd	r25, Y+52	; 0x34
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <HLCD_VoidInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6d a9       	ldd	r22, Y+53	; 0x35
    20d6:	7e a9       	ldd	r23, Y+54	; 0x36
    20d8:	8f a9       	ldd	r24, Y+55	; 0x37
    20da:	98 ad       	ldd	r25, Y+56	; 0x38
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	98 ab       	std	Y+48, r25	; 0x30
    20fa:	8f a7       	std	Y+47, r24	; 0x2f
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <HLCD_VoidInit+0xd6>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e a7       	std	Y+46, r25	; 0x2e
    2104:	8d a7       	std	Y+45, r24	; 0x2d
    2106:	8d a5       	ldd	r24, Y+45	; 0x2d
    2108:	9e a5       	ldd	r25, Y+46	; 0x2e
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <HLCD_VoidInit+0xc4>
    210e:	9e a7       	std	Y+46, r25	; 0x2e
    2110:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8f a5       	ldd	r24, Y+47	; 0x2f
    2114:	98 a9       	ldd	r25, Y+48	; 0x30
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	98 ab       	std	Y+48, r25	; 0x30
    211a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8f a5       	ldd	r24, Y+47	; 0x2f
    211e:	98 a9       	ldd	r25, Y+48	; 0x30
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <HLCD_VoidInit+0xb8>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <HLCD_VoidInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	69 a9       	ldd	r22, Y+49	; 0x31
    2128:	7a a9       	ldd	r23, Y+50	; 0x32
    212a:	8b a9       	ldd	r24, Y+51	; 0x33
    212c:	9c a9       	ldd	r25, Y+52	; 0x34
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	98 ab       	std	Y+48, r25	; 0x30
    2138:	8f a7       	std	Y+47, r24	; 0x2f
    213a:	8f a5       	ldd	r24, Y+47	; 0x2f
    213c:	98 a9       	ldd	r25, Y+48	; 0x30
    213e:	9c a7       	std	Y+44, r25	; 0x2c
    2140:	8b a7       	std	Y+43, r24	; 0x2b
    2142:	8b a5       	ldd	r24, Y+43	; 0x2b
    2144:	9c a5       	ldd	r25, Y+44	; 0x2c
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <HLCD_VoidInit+0x100>
    214a:	9c a7       	std	Y+44, r25	; 0x2c
    214c:	8b a7       	std	Y+43, r24	; 0x2b

	// wait for 30ms
	_delay_ms(30);
	// function Set 0b00111100
	HLCD_VoidSendCommand(LCD_functionSet);
    214e:	8c e3       	ldi	r24, 0x3C	; 60
    2150:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 e8       	ldi	r26, 0x80	; 128
    215a:	bf e3       	ldi	r27, 0x3F	; 63
    215c:	8f a3       	std	Y+39, r24	; 0x27
    215e:	98 a7       	std	Y+40, r25	; 0x28
    2160:	a9 a7       	std	Y+41, r26	; 0x29
    2162:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	6f a1       	ldd	r22, Y+39	; 0x27
    2166:	78 a5       	ldd	r23, Y+40	; 0x28
    2168:	89 a5       	ldd	r24, Y+41	; 0x29
    216a:	9a a5       	ldd	r25, Y+42	; 0x2a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a ef       	ldi	r20, 0xFA	; 250
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8b a3       	std	Y+35, r24	; 0x23
    217e:	9c a3       	std	Y+36, r25	; 0x24
    2180:	ad a3       	std	Y+37, r26	; 0x25
    2182:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2184:	6b a1       	ldd	r22, Y+35	; 0x23
    2186:	7c a1       	ldd	r23, Y+36	; 0x24
    2188:	8d a1       	ldd	r24, Y+37	; 0x25
    218a:	9e a1       	ldd	r25, Y+38	; 0x26
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	2c f4       	brge	.+10     	; 0x21a6 <HLCD_VoidInit+0x160>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	3f c0       	rjmp	.+126    	; 0x2224 <HLCD_VoidInit+0x1de>
	else if (__tmp > 65535)
    21a6:	6b a1       	ldd	r22, Y+35	; 0x23
    21a8:	7c a1       	ldd	r23, Y+36	; 0x24
    21aa:	8d a1       	ldd	r24, Y+37	; 0x25
    21ac:	9e a1       	ldd	r25, Y+38	; 0x26
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	4c f5       	brge	.+82     	; 0x2210 <HLCD_VoidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	6f a1       	ldd	r22, Y+39	; 0x27
    21c0:	78 a5       	ldd	r23, Y+40	; 0x28
    21c2:	89 a5       	ldd	r24, Y+41	; 0x29
    21c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <HLCD_VoidInit+0x1c0>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	98 a3       	std	Y+32, r25	; 0x20
    21ee:	8f 8f       	std	Y+31, r24	; 0x1f
    21f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21f2:	98 a1       	ldd	r25, Y+32	; 0x20
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <HLCD_VoidInit+0x1ae>
    21f8:	98 a3       	std	Y+32, r25	; 0x20
    21fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9a a3       	std	Y+34, r25	; 0x22
    2204:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	89 a1       	ldd	r24, Y+33	; 0x21
    2208:	9a a1       	ldd	r25, Y+34	; 0x22
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <HLCD_VoidInit+0x1a2>
    220e:	14 c0       	rjmp	.+40     	; 0x2238 <HLCD_VoidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	6b a1       	ldd	r22, Y+35	; 0x23
    2212:	7c a1       	ldd	r23, Y+36	; 0x24
    2214:	8d a1       	ldd	r24, Y+37	; 0x25
    2216:	9e a1       	ldd	r25, Y+38	; 0x26
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9a a3       	std	Y+34, r25	; 0x22
    2222:	89 a3       	std	Y+33, r24	; 0x21
    2224:	89 a1       	ldd	r24, Y+33	; 0x21
    2226:	9a a1       	ldd	r25, Y+34	; 0x22
    2228:	9e 8f       	std	Y+30, r25	; 0x1e
    222a:	8d 8f       	std	Y+29, r24	; 0x1d
    222c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    222e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <HLCD_VoidInit+0x1ea>
    2234:	9e 8f       	std	Y+30, r25	; 0x1e
    2236:	8d 8f       	std	Y+29, r24	; 0x1d
	// wait for 39 us -> 1ms
	_delay_ms(1);
	// Dispaly ON/OFF 0b00001100
	HLCD_VoidSendCommand(LCD_DispalyOnOff);
    2238:	8c e0       	ldi	r24, 0x0C	; 12
    223a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	89 8f       	std	Y+25, r24	; 0x19
    2248:	9a 8f       	std	Y+26, r25	; 0x1a
    224a:	ab 8f       	std	Y+27, r26	; 0x1b
    224c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	69 8d       	ldd	r22, Y+25	; 0x19
    2250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8d 8b       	std	Y+21, r24	; 0x15
    2268:	9e 8b       	std	Y+22, r25	; 0x16
    226a:	af 8b       	std	Y+23, r26	; 0x17
    226c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    226e:	6d 89       	ldd	r22, Y+21	; 0x15
    2270:	7e 89       	ldd	r23, Y+22	; 0x16
    2272:	8f 89       	ldd	r24, Y+23	; 0x17
    2274:	98 8d       	ldd	r25, Y+24	; 0x18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <HLCD_VoidInit+0x24a>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
    228e:	3f c0       	rjmp	.+126    	; 0x230e <HLCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <HLCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	69 8d       	ldd	r22, Y+25	; 0x19
    22aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9c 8b       	std	Y+20, r25	; 0x14
    22ce:	8b 8b       	std	Y+19, r24	; 0x13
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <HLCD_VoidInit+0x2aa>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9a 8b       	std	Y+18, r25	; 0x12
    22d8:	89 8b       	std	Y+17, r24	; 0x11
    22da:	89 89       	ldd	r24, Y+17	; 0x11
    22dc:	9a 89       	ldd	r25, Y+18	; 0x12
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <HLCD_VoidInit+0x298>
    22e2:	9a 8b       	std	Y+18, r25	; 0x12
    22e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <HLCD_VoidInit+0x28c>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <HLCD_VoidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6d 89       	ldd	r22, Y+21	; 0x15
    22fc:	7e 89       	ldd	r23, Y+22	; 0x16
    22fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2300:	98 8d       	ldd	r25, Y+24	; 0x18
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	98 8b       	std	Y+16, r25	; 0x10
    2314:	8f 87       	std	Y+15, r24	; 0x0f
    2316:	8f 85       	ldd	r24, Y+15	; 0x0f
    2318:	98 89       	ldd	r25, Y+16	; 0x10
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <HLCD_VoidInit+0x2d4>
    231e:	98 8b       	std	Y+16, r25	; 0x10
    2320:	8f 87       	std	Y+15, r24	; 0x0f
	// wait for 39 us -> 1ms
	_delay_ms(1);
	// Dispaly clear 0b00000001
	HLCD_VoidSendCommand(LCD_Dispalyclear);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e0       	ldi	r26, 0x00	; 0
    232e:	b0 e4       	ldi	r27, 0x40	; 64
    2330:	8b 87       	std	Y+11, r24	; 0x0b
    2332:	9c 87       	std	Y+12, r25	; 0x0c
    2334:	ad 87       	std	Y+13, r26	; 0x0d
    2336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6b 85       	ldd	r22, Y+11	; 0x0b
    233a:	7c 85       	ldd	r23, Y+12	; 0x0c
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8f 83       	std	Y+7, r24	; 0x07
    2352:	98 87       	std	Y+8, r25	; 0x08
    2354:	a9 87       	std	Y+9, r26	; 0x09
    2356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <HLCD_VoidInit+0x334>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <HLCD_VoidInit+0x3b2>
	else if (__tmp > 65535)
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <HLCD_VoidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	6b 85       	ldd	r22, Y+11	; 0x0b
    2394:	7c 85       	ldd	r23, Y+12	; 0x0c
    2396:	8d 85       	ldd	r24, Y+13	; 0x0d
    2398:	9e 85       	ldd	r25, Y+14	; 0x0e
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e2       	ldi	r20, 0x20	; 32
    23a0:	51 e4       	ldi	r21, 0x41	; 65
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <HLCD_VoidInit+0x394>
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	8b 83       	std	Y+3, r24	; 0x03
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <HLCD_VoidInit+0x382>
    23cc:	9c 83       	std	Y+4, r25	; 0x04
    23ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	69 f7       	brne	.-38     	; 0x23bc <HLCD_VoidInit+0x376>
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <HLCD_VoidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	8d 81       	ldd	r24, Y+5	; 0x05
    23fa:	9e 81       	ldd	r25, Y+6	; 0x06
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <HLCD_VoidInit+0x3be>
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms -> 2ms
	_delay_ms(2);
	// Entry Mode 0b00000110
	HLCD_VoidSendCommand(LCD_EntryMode);
    240c:	86 e0       	ldi	r24, 0x06	; 6
    240e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
	//_delay_ms(1);
}
    2412:	e8 96       	adiw	r28, 0x38	; 56
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <HLCD_VoidClear>:



void HLCD_VoidClear()
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	2e 97       	sbiw	r28, 0x0e	; 14
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
	//display clear
	HLCD_VoidSendCommand(1);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e0       	ldi	r26, 0x00	; 0
    2444:	b0 e4       	ldi	r27, 0x40	; 64
    2446:	8b 87       	std	Y+11, r24	; 0x0b
    2448:	9c 87       	std	Y+12, r25	; 0x0c
    244a:	ad 87       	std	Y+13, r26	; 0x0d
    244c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2450:	7c 85       	ldd	r23, Y+12	; 0x0c
    2452:	8d 85       	ldd	r24, Y+13	; 0x0d
    2454:	9e 85       	ldd	r25, Y+14	; 0x0e
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8f 83       	std	Y+7, r24	; 0x07
    2468:	98 87       	std	Y+8, r25	; 0x08
    246a:	a9 87       	std	Y+9, r26	; 0x09
    246c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <HLCD_VoidClear+0x6c>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	3f c0       	rjmp	.+126    	; 0x250e <HLCD_VoidClear+0xea>
	else if (__tmp > 65535)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <HLCD_VoidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <HLCD_VoidClear+0xcc>
    24d2:	88 ec       	ldi	r24, 0xC8	; 200
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <HLCD_VoidClear+0xba>
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <HLCD_VoidClear+0xae>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <HLCD_VoidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <HLCD_VoidClear+0xf6>
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

//	G_u8_Cursor_Pos  = 0;
//	G_u8_Cursor_Line = 0;
}
    2522:	2e 96       	adiw	r28, 0x0e	; 14
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <HLCD_VoidCursor>:


void HLCD_VoidCursor(u8 A_u8_Pos,u8 A_u8_Line)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <HLCD_VoidCursor+0x6>
    253a:	00 d0       	rcall	.+0      	; 0x253c <HLCD_VoidCursor+0x8>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_Line)
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	3c 83       	std	Y+4, r19	; 0x04
    254c:	2b 83       	std	Y+3, r18	; 0x03
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	31 f0       	breq	.+12     	; 0x2562 <HLCD_VoidCursor+0x2e>
    2556:	2b 81       	ldd	r18, Y+3	; 0x03
    2558:	3c 81       	ldd	r19, Y+4	; 0x04
    255a:	21 30       	cpi	r18, 0x01	; 1
    255c:	31 05       	cpc	r19, r1
    255e:	31 f0       	breq	.+12     	; 0x256c <HLCD_VoidCursor+0x38>
    2560:	09 c0       	rjmp	.+18     	; 0x2574 <HLCD_VoidCursor+0x40>
	{
	case LINE0 : HLCD_VoidSendCommand( 0X80 + A_u8_Pos); break;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	80 58       	subi	r24, 0x80	; 128
    2566:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
    256a:	04 c0       	rjmp	.+8      	; 0x2574 <HLCD_VoidCursor+0x40>

	case LINE1 : HLCD_VoidSendCommand( 0XC0 + A_u8_Pos); break;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	80 54       	subi	r24, 0x40	; 64
    2570:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
	}
//	G_u8_Cursor_Pos  = A_u8_Pos;
//	G_u8_Cursor_Line = A_u8_Line;
}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <HLCD_VoidSendString>:


void HLCD_VoidSendString(char *A_u8_PtrString)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <HLCD_VoidSendString+0x6>
    2588:	00 d0       	rcall	.+0      	; 0x258a <HLCD_VoidSendString+0x8>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8_Counter    = 0;
    2592:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_u8_Cursor_Pos = 0;
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	1a c0       	rjmp	.+52     	; 0x25cc <HLCD_VoidSendString+0x4a>


	while( (A_u8_PtrString[L_u8_Counter]) != '\0')
	{
		if(L_u8_Cursor_Pos > 15)
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	80 31       	cpi	r24, 0x10	; 16
    259c:	28 f0       	brcs	.+10     	; 0x25a8 <HLCD_VoidSendString+0x26>
			{
				HLCD_VoidCursor(0,LINE1);
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
				L_u8_Cursor_Pos  = 0;
    25a6:	19 82       	std	Y+1, r1	; 0x01

//				G_u8_Cursor_Line = 1;
//				G_u8_Cursor_Pos  = 0;
			}

		HLCD_VoidSendData(A_u8_PtrString[L_u8_Counter++]);
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	fc 01       	movw	r30, r24
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	90 81       	ld	r25, Z
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	8a 83       	std	Y+2, r24	; 0x02
    25c0:	89 2f       	mov	r24, r25
    25c2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
		L_u8_Cursor_Pos++;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	89 83       	std	Y+1, r24	; 0x01
{
	u8 L_u8_Counter    = 0;
	u8 L_u8_Cursor_Pos = 0;


	while( (A_u8_PtrString[L_u8_Counter]) != '\0')
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	fc 01       	movw	r30, r24
    25d8:	e2 0f       	add	r30, r18
    25da:	f3 1f       	adc	r31, r19
    25dc:	80 81       	ld	r24, Z
    25de:	88 23       	and	r24, r24
    25e0:	d9 f6       	brne	.-74     	; 0x2598 <HLCD_VoidSendString+0x16>

		//G_u8_Cursor_Pos++;

	}

}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <HLCD_VoidSendNumber>:
void HLCD_VoidSendNumber(s32 A_s32_Number  )
{
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	28 97       	sbiw	r28, 0x08	; 8
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	6d 83       	std	Y+5, r22	; 0x05
    260e:	7e 83       	std	Y+6, r23	; 0x06
    2610:	8f 83       	std	Y+7, r24	; 0x07
    2612:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32_TempNum=1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e0       	ldi	r26, 0x00	; 0
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	ab 83       	std	Y+3, r26	; 0x03
    2622:	bc 83       	std	Y+4, r27	; 0x04

	if(A_s32_Number==0)
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	af 81       	ldd	r26, Y+7	; 0x07
    262a:	b8 85       	ldd	r27, Y+8	; 0x08
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	a1 05       	cpc	r26, r1
    2630:	b1 05       	cpc	r27, r1
    2632:	21 f4       	brne	.+8      	; 0x263c <HLCD_VoidSendNumber+0x4c>
	{
		HLCD_VoidSendData('0');
    2634:	80 e3       	ldi	r24, 0x30	; 48
    2636:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
    263a:	85 c0       	rjmp	.+266    	; 0x2746 <HLCD_VoidSendNumber+0x156>

		//G_u8_Cursor_Pos++;
		return;
	}
	if(A_s32_Number<0)
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	af 81       	ldd	r26, Y+7	; 0x07
    2642:	b8 85       	ldd	r27, Y+8	; 0x08
    2644:	bb 23       	and	r27, r27
    2646:	0c f0       	brlt	.+2      	; 0x264a <HLCD_VoidSendNumber+0x5a>
    2648:	49 c0       	rjmp	.+146    	; 0x26dc <HLCD_VoidSendNumber+0xec>
	{
		HLCD_VoidSendData('-');
    264a:	8d e2       	ldi	r24, 0x2D	; 45
    264c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
		A_s32_Number *= -1;
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	af 81       	ldd	r26, Y+7	; 0x07
    2656:	b8 85       	ldd	r27, Y+8	; 0x08
    2658:	b0 95       	com	r27
    265a:	a0 95       	com	r26
    265c:	90 95       	com	r25
    265e:	81 95       	neg	r24
    2660:	9f 4f       	sbci	r25, 0xFF	; 255
    2662:	af 4f       	sbci	r26, 0xFF	; 255
    2664:	bf 4f       	sbci	r27, 0xFF	; 255
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	af 83       	std	Y+7, r26	; 0x07
    266c:	b8 87       	std	Y+8, r27	; 0x08
    266e:	36 c0       	rjmp	.+108    	; 0x26dc <HLCD_VoidSendNumber+0xec>
		//G_u8_Cursor_Pos++;
	}

	while (A_s32_Number != 0)
	{
		L_u32_TempNum = (L_u32_TempNum * 10) + (A_s32_Number%10);
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	ab 81       	ldd	r26, Y+3	; 0x03
    2676:	bc 81       	ldd	r27, Y+4	; 0x04
    2678:	2a e0       	ldi	r18, 0x0A	; 10
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsi3>
    2688:	7b 01       	movw	r14, r22
    268a:	8c 01       	movw	r16, r24
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	af 81       	ldd	r26, Y+7	; 0x07
    2692:	b8 85       	ldd	r27, Y+8	; 0x08
    2694:	2a e0       	ldi	r18, 0x0A	; 10
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__divmodsi4>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8e 0d       	add	r24, r14
    26aa:	9f 1d       	adc	r25, r15
    26ac:	a0 1f       	adc	r26, r16
    26ae:	b1 1f       	adc	r27, r17
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	ab 83       	std	Y+3, r26	; 0x03
    26b6:	bc 83       	std	Y+4, r27	; 0x04
		A_s32_Number /= 10;
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	af 81       	ldd	r26, Y+7	; 0x07
    26be:	b8 85       	ldd	r27, Y+8	; 0x08
    26c0:	2a e0       	ldi	r18, 0x0A	; 10
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__divmodsi4>
    26d0:	da 01       	movw	r26, r20
    26d2:	c9 01       	movw	r24, r18
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	af 83       	std	Y+7, r26	; 0x07
    26da:	b8 87       	std	Y+8, r27	; 0x08
		A_s32_Number *= -1;

		//G_u8_Cursor_Pos++;
	}

	while (A_s32_Number != 0)
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	af 81       	ldd	r26, Y+7	; 0x07
    26e2:	b8 85       	ldd	r27, Y+8	; 0x08
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	a1 05       	cpc	r26, r1
    26e8:	b1 05       	cpc	r27, r1
    26ea:	11 f6       	brne	.-124    	; 0x2670 <HLCD_VoidSendNumber+0x80>
    26ec:	23 c0       	rjmp	.+70     	; 0x2734 <HLCD_VoidSendNumber+0x144>
//				G_u8_Cursor_Pos  = 0;
//				G_u8_Cursor_Line = 1;

//			}

		HLCD_VoidSendData((L_u32_TempNum % 10)+48);
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	ab 81       	ldd	r26, Y+3	; 0x03
    26f4:	bc 81       	ldd	r27, Y+4	; 0x04
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__udivmodsi4>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	80 5d       	subi	r24, 0xD0	; 208
    270c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
		L_u32_TempNum /= 10;
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	ab 81       	ldd	r26, Y+3	; 0x03
    2716:	bc 81       	ldd	r27, Y+4	; 0x04
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__udivmodsi4>
    2728:	da 01       	movw	r26, r20
    272a:	c9 01       	movw	r24, r18
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	ab 83       	std	Y+3, r26	; 0x03
    2732:	bc 83       	std	Y+4, r27	; 0x04
	{
		L_u32_TempNum = (L_u32_TempNum * 10) + (A_s32_Number%10);
		A_s32_Number /= 10;
	}

	while(L_u32_TempNum != 1)
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	ab 81       	ldd	r26, Y+3	; 0x03
    273a:	bc 81       	ldd	r27, Y+4	; 0x04
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	91 05       	cpc	r25, r1
    2740:	a1 05       	cpc	r26, r1
    2742:	b1 05       	cpc	r27, r1
    2744:	a1 f6       	brne	.-88     	; 0x26ee <HLCD_VoidSendNumber+0xfe>
		//G_u8_Cursor_Pos++;
	}



}
    2746:	28 96       	adiw	r28, 0x08	; 8
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	08 95       	ret

00002760 <HLCD_VoidSaveCustomChar>:

void HLCD_VoidSaveCustomChar(u8 A_u8_CGRAMIndex, u8 A_u8_CustomArray[])
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <HLCD_VoidSaveCustomChar+0x6>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <HLCD_VoidSaveCustomChar+0x8>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	7c 83       	std	Y+4, r23	; 0x04
    2770:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_VoidSendCommand( 0b01000000 + ( A_u8_CGRAMIndex * 8 ) );
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	08 96       	adiw	r24, 0x08	; 8
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>

	for(u8 L_u8_Index = 0; L_u8_Index < 8; L_u8_Index++ )
    278a:	19 82       	std	Y+1, r1	; 0x01
    278c:	0e c0       	rjmp	.+28     	; 0x27aa <HLCD_VoidSaveCustomChar+0x4a>
	{
		HLCD_VoidSendData(A_u8_CustomArray[L_u8_Index]);
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	80 81       	ld	r24, Z
    27a0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>

void HLCD_VoidSaveCustomChar(u8 A_u8_CGRAMIndex, u8 A_u8_CustomArray[])
{
	HLCD_VoidSendCommand( 0b01000000 + ( A_u8_CGRAMIndex * 8 ) );

	for(u8 L_u8_Index = 0; L_u8_Index < 8; L_u8_Index++ )
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	88 30       	cpi	r24, 0x08	; 8
    27ae:	78 f3       	brcs	.-34     	; 0x278e <HLCD_VoidSaveCustomChar+0x2e>
	case LINE0 : HLCD_VoidSendCommand( 0X80 + G_u8_Cursor_Pos); break;

	case LINE1  : HLCD_VoidSendCommand( 0XC0 + G_u8_Cursor_Pos); break;
	}*/

	HLCD_VoidSendCommand(0x80);
    27b0:	80 e8       	ldi	r24, 0x80	; 128
    27b2:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <HLCD_VoidSendCommand>
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <HLCD_VoidDisplayCustomChar>:

void HLCD_VoidDisplayCustomChar(u8 A_u8_CGRAMIndex)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	0f 92       	push	r0
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8_CGRAMIndex < 8)
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	88 30       	cpi	r24, 0x08	; 8
    27d4:	18 f4       	brcc	.+6      	; 0x27dc <HLCD_VoidDisplayCustomChar+0x18>
	{
		HLCD_VoidSendData(A_u8_CGRAMIndex);
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
	}
		//G_u8_Cursor_Pos++;
}
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <HKPD_VoidInit>:
#else
#error "Choose the right configuration"
#endif

void HKPD_VoidInit()
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	2e 97       	sbiw	r28, 0x0e	; 14
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61

	MDIO_voidSetPortDirection(KPD_PORT, 0x0f);
	MDIO_voidSetPortValue(KPD_PORT,0xff);

#elif (RowNum == 4 && ColNum == 3 )
	MDIO_voidSetPortDirection(KPD_PORT, 0b00000111);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	67 e0       	ldi	r22, 0x07	; 7
    27fc:	0e 94 17 09 	call	0x122e	; 0x122e <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(KPD_PORT,0xff);
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	6f ef       	ldi	r22, 0xFF	; 255
    2804:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e2       	ldi	r26, 0x20	; 32
    280e:	b1 e4       	ldi	r27, 0x41	; 65
    2810:	8b 87       	std	Y+11, r24	; 0x0b
    2812:	9c 87       	std	Y+12, r25	; 0x0c
    2814:	ad 87       	std	Y+13, r26	; 0x0d
    2816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	6b 85       	ldd	r22, Y+11	; 0x0b
    281a:	7c 85       	ldd	r23, Y+12	; 0x0c
    281c:	8d 85       	ldd	r24, Y+13	; 0x0d
    281e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a ef       	ldi	r20, 0xFA	; 250
    2826:	54 e4       	ldi	r21, 0x44	; 68
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8f 83       	std	Y+7, r24	; 0x07
    2832:	98 87       	std	Y+8, r25	; 0x08
    2834:	a9 87       	std	Y+9, r26	; 0x09
    2836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	2c f4       	brge	.+10     	; 0x285a <HKPD_VoidInit+0x76>
		__ticks = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	3f c0       	rjmp	.+126    	; 0x28d8 <HKPD_VoidInit+0xf4>
	else if (__tmp > 65535)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	4c f5       	brge	.+82     	; 0x28c4 <HKPD_VoidInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	6b 85       	ldd	r22, Y+11	; 0x0b
    2874:	7c 85       	ldd	r23, Y+12	; 0x0c
    2876:	8d 85       	ldd	r24, Y+13	; 0x0d
    2878:	9e 85       	ldd	r25, Y+14	; 0x0e
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <HKPD_VoidInit+0xd6>
    289c:	88 ec       	ldi	r24, 0xC8	; 200
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <HKPD_VoidInit+0xc4>
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	69 f7       	brne	.-38     	; 0x289c <HKPD_VoidInit+0xb8>
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <HKPD_VoidInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	6f 81       	ldd	r22, Y+7	; 0x07
    28c6:	78 85       	ldd	r23, Y+8	; 0x08
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	9a 81       	ldd	r25, Y+2	; 0x02
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <HKPD_VoidInit+0x100>
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(10);
}
    28ec:	2e 96       	adiw	r28, 0x0e	; 14
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <HKPD_u8GetPressedKey>:


u8 HKPD_u8GetPressedKey()
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	62 97       	sbiw	r28, 0x12	; 18
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
	HKPD_VoidInit();
    2912:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <HKPD_VoidInit>
u8 L_u8_PressedKey, L_u8_Stop=1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	89 8b       	std	Y+17, r24	; 0x11
    291a:	b5 c0       	rjmp	.+362    	; 0x2a86 <HKPD_u8GetPressedKey+0x188>


while(L_u8_Stop)
{
	for(u8 Col = 0 ; Col < ColNum ; Col++ )
    291c:	18 8a       	std	Y+16, r1	; 0x10
    291e:	af c0       	rjmp	.+350    	; 0x2a7e <HKPD_u8GetPressedKey+0x180>
	{

		MDIO_voidSetPinValue ( KPD_PORT ,Col, LOW );
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	68 89       	ldd	r22, Y+16	; 0x10
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>

		for(u8 Row = 0 ; Row < RowNum ; Row++ )
    292a:	1f 86       	std	Y+15, r1	; 0x0f
    292c:	9c c0       	rjmp	.+312    	; 0x2a66 <HKPD_u8GetPressedKey+0x168>
		{
			if(MDIO_u8GetPinValue(KPD_PORT, Row+ColNum ) == LOW)
    292e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2930:	98 2f       	mov	r25, r24
    2932:	9d 5f       	subi	r25, 0xFD	; 253
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	69 2f       	mov	r22, r25
    2938:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_u8GetPinValue>
    293c:	88 23       	and	r24, r24
    293e:	09 f0       	breq	.+2      	; 0x2942 <HKPD_u8GetPressedKey+0x44>
    2940:	8f c0       	rjmp	.+286    	; 0x2a60 <HKPD_u8GetPressedKey+0x162>
			{
				L_u8_PressedKey=G_u8_Matrix[Row][Col];
    2942:	8f 85       	ldd	r24, Y+15	; 0x0f
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	88 89       	ldd	r24, Y+16	; 0x10
    294a:	48 2f       	mov	r20, r24
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	c9 01       	movw	r24, r18
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	82 0f       	add	r24, r18
    2956:	93 1f       	adc	r25, r19
    2958:	84 0f       	add	r24, r20
    295a:	95 1f       	adc	r25, r21
    295c:	fc 01       	movw	r30, r24
    295e:	e9 5b       	subi	r30, 0xB9	; 185
    2960:	fe 4f       	sbci	r31, 0xFE	; 254
    2962:	80 81       	ld	r24, Z
    2964:	8a 8b       	std	Y+18, r24	; 0x12
				while(MDIO_u8GetPinValue(KPD_PORT, Row+ColNum ) == LOW ){}
    2966:	8f 85       	ldd	r24, Y+15	; 0x0f
    2968:	98 2f       	mov	r25, r24
    296a:	9d 5f       	subi	r25, 0xFD	; 253
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	69 2f       	mov	r22, r25
    2970:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_u8GetPinValue>
    2974:	88 23       	and	r24, r24
    2976:	b9 f3       	breq	.-18     	; 0x2966 <HKPD_u8GetPressedKey+0x68>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e2       	ldi	r26, 0x20	; 32
    297e:	b1 e4       	ldi	r27, 0x41	; 65
    2980:	8b 87       	std	Y+11, r24	; 0x0b
    2982:	9c 87       	std	Y+12, r25	; 0x0c
    2984:	ad 87       	std	Y+13, r26	; 0x0d
    2986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8f 83       	std	Y+7, r24	; 0x07
    29a2:	98 87       	std	Y+8, r25	; 0x08
    29a4:	a9 87       	std	Y+9, r26	; 0x09
    29a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a8:	6f 81       	ldd	r22, Y+7	; 0x07
    29aa:	78 85       	ldd	r23, Y+8	; 0x08
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <HKPD_u8GetPressedKey+0xcc>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <HKPD_u8GetPressedKey+0x14a>
	else if (__tmp > 65535)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <HKPD_u8GetPressedKey+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <HKPD_u8GetPressedKey+0x12c>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <HKPD_u8GetPressedKey+0x11a>
    2a1c:	9c 83       	std	Y+4, r25	; 0x04
    2a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <HKPD_u8GetPressedKey+0x10e>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <HKPD_u8GetPressedKey+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	6f 81       	ldd	r22, Y+7	; 0x07
    2a36:	78 85       	ldd	r23, Y+8	; 0x08
    2a38:	89 85       	ldd	r24, Y+9	; 0x09
    2a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <HKPD_u8GetPressedKey+0x156>
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				L_u8_Stop=0;
    2a5c:	19 8a       	std	Y+17, r1	; 0x11
    2a5e:	07 c0       	rjmp	.+14     	; 0x2a6e <HKPD_u8GetPressedKey+0x170>
	for(u8 Col = 0 ; Col < ColNum ; Col++ )
	{

		MDIO_voidSetPinValue ( KPD_PORT ,Col, LOW );

		for(u8 Row = 0 ; Row < RowNum ; Row++ )
    2a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a62:	8f 5f       	subi	r24, 0xFF	; 255
    2a64:	8f 87       	std	Y+15, r24	; 0x0f
    2a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a68:	84 30       	cpi	r24, 0x04	; 4
    2a6a:	08 f4       	brcc	.+2      	; 0x2a6e <HKPD_u8GetPressedKey+0x170>
    2a6c:	60 cf       	rjmp	.-320    	; 0x292e <HKPD_u8GetPressedKey+0x30>
				L_u8_Stop=0;
				break;
			}

		}
		MDIO_voidSetPinValue ( KPD_PORT ,Col, HIGH);
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	68 89       	ldd	r22, Y+16	; 0x10
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 c2 0a 	call	0x1584	; 0x1584 <MDIO_voidSetPinValue>
u8 L_u8_PressedKey, L_u8_Stop=1;


while(L_u8_Stop)
{
	for(u8 Col = 0 ; Col < ColNum ; Col++ )
    2a78:	88 89       	ldd	r24, Y+16	; 0x10
    2a7a:	8f 5f       	subi	r24, 0xFF	; 255
    2a7c:	88 8b       	std	Y+16, r24	; 0x10
    2a7e:	88 89       	ldd	r24, Y+16	; 0x10
    2a80:	83 30       	cpi	r24, 0x03	; 3
    2a82:	08 f4       	brcc	.+2      	; 0x2a86 <HKPD_u8GetPressedKey+0x188>
    2a84:	4d cf       	rjmp	.-358    	; 0x2920 <HKPD_u8GetPressedKey+0x22>
{
	HKPD_VoidInit();
u8 L_u8_PressedKey, L_u8_Stop=1;


while(L_u8_Stop)
    2a86:	89 89       	ldd	r24, Y+17	; 0x11
    2a88:	88 23       	and	r24, r24
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <HKPD_u8GetPressedKey+0x190>
    2a8c:	47 cf       	rjmp	.-370    	; 0x291c <HKPD_u8GetPressedKey+0x1e>

		}
		MDIO_voidSetPinValue ( KPD_PORT ,Col, HIGH);
	}
}
return L_u8_PressedKey ;
    2a8e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2a90:	62 96       	adiw	r28, 0x12	; 18
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <main>:

u16 GetNumber();

u8 CheckPassword( u8 A_Bool );

int main(){
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	c6 58       	subi	r28, 0x86	; 134
    2ab0:	d0 40       	sbci	r29, 0x00	; 0
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61


	HLCD_VoidInit();
    2abc:	0e 94 23 10 	call	0x2046	; 0x2046 <HLCD_VoidInit>
	MUART_VoidInit();
    2ac0:	0e 94 a3 05 	call	0xb46	; 0xb46 <MUART_VoidInit>
	HKPD_VoidInit();
    2ac4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <HKPD_VoidInit>

while(1){

	u8 Bool1=9, Bool2=9;
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ec 57       	subi	r30, 0x7C	; 124
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	89 e0       	ldi	r24, 0x09	; 9
    2ad0:	80 83       	st	Z, r24
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 57       	subi	r30, 0x7D	; 125
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	89 e0       	ldi	r24, 0x09	; 9
    2ada:	80 83       	st	Z, r24
	u8 Received_Key;
	u8 Pressed_Key;

	if ((Pressed_Key = HKPD_u8GetPressedKey())=='*'
    2adc:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ef 57       	subi	r30, 0x7F	; 127
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 83       	st	Z, r24
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ef 57       	subi	r30, 0x7F	; 127
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	8a 32       	cpi	r24, 0x2A	; 42
    2af2:	31 f0       	breq	.+12     	; 0x2b00 <main+0x5e>
    2af4:	fe 01       	movw	r30, r28
    2af6:	ef 57       	subi	r30, 0x7F	; 127
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	83 32       	cpi	r24, 0x23	; 35
    2afe:	21 f7       	brne	.-56     	; 0x2ac8 <main+0x26>
	|| Pressed_Key == '#')
	{
		MUART_VoidTransmit('C');
    2b00:	83 e4       	ldi	r24, 0x43	; 67
    2b02:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
		for(u8 i = 0 ; i < 3 ; i++ )
    2b06:	fe 01       	movw	r30, r28
    2b08:	e0 58       	subi	r30, 0x80	; 128
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	10 82       	st	Z, r1
    2b0e:	21 c0       	rjmp	.+66     	; 0x2b52 <main+0xb0>
		{
			Bool1 = CheckID();
    2b10:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <CheckID>
    2b14:	fe 01       	movw	r30, r28
    2b16:	ec 57       	subi	r30, 0x7C	; 124
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 83       	st	Z, r24
			if ( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ec 57       	subi	r30, 0x7C	; 124
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	d9 f0       	breq	.+54     	; 0x2b5e <main+0xbc>
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ec 57       	subi	r30, 0x7C	; 124
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	82 30       	cpi	r24, 0x02	; 2
    2b32:	a9 f0       	breq	.+42     	; 0x2b5e <main+0xbc>
    2b34:	fe 01       	movw	r30, r28
    2b36:	ec 57       	subi	r30, 0x7C	; 124
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	83 30       	cpi	r24, 0x03	; 3
    2b3e:	79 f0       	breq	.+30     	; 0x2b5e <main+0xbc>

	if ((Pressed_Key = HKPD_u8GetPressedKey())=='*'
	|| Pressed_Key == '#')
	{
		MUART_VoidTransmit('C');
		for(u8 i = 0 ; i < 3 ; i++ )
    2b40:	de 01       	movw	r26, r28
    2b42:	a0 58       	subi	r26, 0x80	; 128
    2b44:	bf 4f       	sbci	r27, 0xFF	; 255
    2b46:	fe 01       	movw	r30, r28
    2b48:	e0 58       	subi	r30, 0x80	; 128
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	8c 93       	st	X, r24
    2b52:	fe 01       	movw	r30, r28
    2b54:	e0 58       	subi	r30, 0x80	; 128
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	83 30       	cpi	r24, 0x03	; 3
    2b5c:	c8 f2       	brcs	.-78     	; 0x2b10 <main+0x6e>
			if ( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
				{	break;	}

		}

	if( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	ec 57       	subi	r30, 0x7C	; 124
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	61 f0       	breq	.+24     	; 0x2b82 <main+0xe0>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ec 57       	subi	r30, 0x7C	; 124
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	82 30       	cpi	r24, 0x02	; 2
    2b74:	31 f0       	breq	.+12     	; 0x2b82 <main+0xe0>
    2b76:	fe 01       	movw	r30, r28
    2b78:	ec 57       	subi	r30, 0x7C	; 124
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	83 30       	cpi	r24, 0x03	; 3
    2b80:	81 f5       	brne	.+96     	; 0x2be2 <main+0x140>
	{
		for(u8 i = 0 ; i < 3 ; i++ )
    2b82:	fe 01       	movw	r30, r28
    2b84:	e1 58       	subi	r30, 0x81	; 129
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	10 82       	st	Z, r1
    2b8a:	25 c0       	rjmp	.+74     	; 0x2bd6 <main+0x134>
		{
			Bool2=CheckPassword(Bool1);
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ec 57       	subi	r30, 0x7C	; 124
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <CheckPassword>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ed 57       	subi	r30, 0x7D	; 125
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 83       	st	Z, r24
			if (Bool2 == 1 || Bool2 == 2 || Bool2 == 3)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ed 57       	subi	r30, 0x7D	; 125
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	81 30       	cpi	r24, 0x01	; 1
    2baa:	d9 f0       	breq	.+54     	; 0x2be2 <main+0x140>
    2bac:	fe 01       	movw	r30, r28
    2bae:	ed 57       	subi	r30, 0x7D	; 125
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	82 30       	cpi	r24, 0x02	; 2
    2bb6:	a9 f0       	breq	.+42     	; 0x2be2 <main+0x140>
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ed 57       	subi	r30, 0x7D	; 125
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	83 30       	cpi	r24, 0x03	; 3
    2bc2:	79 f0       	breq	.+30     	; 0x2be2 <main+0x140>

		}

	if( Bool1 == 1 || Bool1 == 2 || Bool1 == 3)
	{
		for(u8 i = 0 ; i < 3 ; i++ )
    2bc4:	de 01       	movw	r26, r28
    2bc6:	a1 58       	subi	r26, 0x81	; 129
    2bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e1 58       	subi	r30, 0x81	; 129
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	8c 93       	st	X, r24
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e1 58       	subi	r30, 0x81	; 129
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	83 30       	cpi	r24, 0x03	; 3
    2be0:	a8 f2       	brcs	.-86     	; 0x2b8c <main+0xea>

		}
	}


		switch(Bool2)
    2be2:	fe 01       	movw	r30, r28
    2be4:	ed 57       	subi	r30, 0x7D	; 125
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	cb 57       	subi	r28, 0x7B	; 123
    2bf0:	df 4f       	sbci	r29, 0xFF	; 255
    2bf2:	39 83       	std	Y+1, r19	; 0x01
    2bf4:	28 83       	st	Y, r18
    2bf6:	c5 58       	subi	r28, 0x85	; 133
    2bf8:	d0 40       	sbci	r29, 0x00	; 0
    2bfa:	cb 57       	subi	r28, 0x7B	; 123
    2bfc:	df 4f       	sbci	r29, 0xFF	; 255
    2bfe:	88 81       	ld	r24, Y
    2c00:	99 81       	ldd	r25, Y+1	; 0x01
    2c02:	c5 58       	subi	r28, 0x85	; 133
    2c04:	d0 40       	sbci	r29, 0x00	; 0
    2c06:	82 30       	cpi	r24, 0x02	; 2
    2c08:	91 05       	cpc	r25, r1
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <main+0x16c>
    2c0c:	c5 c1       	rjmp	.+906    	; 0x2f98 <main+0x4f6>
    2c0e:	cb 57       	subi	r28, 0x7B	; 123
    2c10:	df 4f       	sbci	r29, 0xFF	; 255
    2c12:	e8 81       	ld	r30, Y
    2c14:	f9 81       	ldd	r31, Y+1	; 0x01
    2c16:	c5 58       	subi	r28, 0x85	; 133
    2c18:	d0 40       	sbci	r29, 0x00	; 0
    2c1a:	e3 30       	cpi	r30, 0x03	; 3
    2c1c:	f1 05       	cpc	r31, r1
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <main+0x180>
    2c20:	6c c3       	rjmp	.+1752   	; 0x32fa <main+0x858>
    2c22:	cb 57       	subi	r28, 0x7B	; 123
    2c24:	df 4f       	sbci	r29, 0xFF	; 255
    2c26:	28 81       	ld	r18, Y
    2c28:	39 81       	ldd	r19, Y+1	; 0x01
    2c2a:	c5 58       	subi	r28, 0x85	; 133
    2c2c:	d0 40       	sbci	r29, 0x00	; 0
    2c2e:	21 30       	cpi	r18, 0x01	; 1
    2c30:	31 05       	cpc	r19, r1
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <main+0x194>
    2c34:	a4 c4       	rjmp	.+2376   	; 0x357e <main+0xadc>
		{
		case 1:
			HLCD_VoidClear();
    2c36:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			HLCD_VoidSendString("Welcome");
    2c3a:	80 e6       	ldi	r24, 0x60	; 96
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("Abdelrahman");
    2c4a:	88 e6       	ldi	r24, 0x68	; 104
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			MUART_VoidTransmit('M');
    2c52:	8d e4       	ldi	r24, 0x4D	; 77
    2c54:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e5 58       	subi	r30, 0x85	; 133
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	aa e7       	ldi	r26, 0x7A	; 122
    2c64:	b4 e4       	ldi	r27, 0x44	; 68
    2c66:	80 83       	st	Z, r24
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	a2 83       	std	Z+2, r26	; 0x02
    2c6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	8e 01       	movw	r16, r28
    2c70:	09 58       	subi	r16, 0x89	; 137
    2c72:	1f 4f       	sbci	r17, 0xFF	; 255
    2c74:	fe 01       	movw	r30, r28
    2c76:	e5 58       	subi	r30, 0x85	; 133
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a ef       	ldi	r20, 0xFA	; 250
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	f8 01       	movw	r30, r16
    2c94:	80 83       	st	Z, r24
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	a2 83       	std	Z+2, r26	; 0x02
    2c9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e9 58       	subi	r30, 0x89	; 137
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e8       	ldi	r20, 0x80	; 128
    2cb0:	5f e3       	ldi	r21, 0x3F	; 63
    2cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb6:	88 23       	and	r24, r24
    2cb8:	44 f4       	brge	.+16     	; 0x2cca <main+0x228>
		__ticks = 1;
    2cba:	fe 01       	movw	r30, r28
    2cbc:	eb 58       	subi	r30, 0x8B	; 139
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
    2cc8:	64 c0       	rjmp	.+200    	; 0x2d92 <main+0x2f0>
	else if (__tmp > 65535)
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e9 58       	subi	r30, 0x89	; 137
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	3f ef       	ldi	r19, 0xFF	; 255
    2cdc:	4f e7       	ldi	r20, 0x7F	; 127
    2cde:	57 e4       	ldi	r21, 0x47	; 71
    2ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce4:	18 16       	cp	r1, r24
    2ce6:	0c f0       	brlt	.+2      	; 0x2cea <main+0x248>
    2ce8:	43 c0       	rjmp	.+134    	; 0x2d70 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	fe 01       	movw	r30, r28
    2cec:	e5 58       	subi	r30, 0x85	; 133
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	8e 01       	movw	r16, r28
    2d0a:	0b 58       	subi	r16, 0x8B	; 139
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	1f c0       	rjmp	.+62     	; 0x2d60 <main+0x2be>
    2d22:	fe 01       	movw	r30, r28
    2d24:	ed 58       	subi	r30, 0x8D	; 141
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	91 83       	std	Z+1, r25	; 0x01
    2d2e:	80 83       	st	Z, r24
    2d30:	fe 01       	movw	r30, r28
    2d32:	ed 58       	subi	r30, 0x8D	; 141
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <main+0x298>
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ed 58       	subi	r30, 0x8D	; 141
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d48:	de 01       	movw	r26, r28
    2d4a:	ab 58       	subi	r26, 0x8B	; 139
    2d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4e:	fe 01       	movw	r30, r28
    2d50:	eb 58       	subi	r30, 0x8B	; 139
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	11 96       	adiw	r26, 0x01	; 1
    2d5c:	9c 93       	st	X, r25
    2d5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d60:	fe 01       	movw	r30, r28
    2d62:	eb 58       	subi	r30, 0x8B	; 139
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	80 81       	ld	r24, Z
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	d1 f6       	brne	.-76     	; 0x2d22 <main+0x280>
    2d6e:	27 c0       	rjmp	.+78     	; 0x2dbe <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	8e 01       	movw	r16, r28
    2d72:	0b 58       	subi	r16, 0x8B	; 139
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	fe 01       	movw	r30, r28
    2d78:	e9 58       	subi	r30, 0x89	; 137
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	60 81       	ld	r22, Z
    2d7e:	71 81       	ldd	r23, Z+1	; 0x01
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	93 81       	ldd	r25, Z+3	; 0x03
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
    2d92:	de 01       	movw	r26, r28
    2d94:	af 58       	subi	r26, 0x8F	; 143
    2d96:	bf 4f       	sbci	r27, 0xFF	; 255
    2d98:	fe 01       	movw	r30, r28
    2d9a:	eb 58       	subi	r30, 0x8B	; 139
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 81       	ld	r24, Z
    2da0:	91 81       	ldd	r25, Z+1	; 0x01
    2da2:	8d 93       	st	X+, r24
    2da4:	9c 93       	st	X, r25
    2da6:	fe 01       	movw	r30, r28
    2da8:	ef 58       	subi	r30, 0x8F	; 143
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <main+0x30e>
    2db4:	fe 01       	movw	r30, r28
    2db6:	ef 58       	subi	r30, 0x8F	; 143
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24

			_delay_ms(1000);

			HLCD_VoidClear();
    2dbe:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			HLCD_VoidSendString("Please wait for");
    2dc2:	84 e7       	ldi	r24, 0x74	; 116
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	61 e0       	ldi	r22, 0x01	; 1
    2dce:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("admin approval");
    2dd2:	84 e8       	ldi	r24, 0x84	; 132
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>

			while ((Received_Key = MUART_u8Receive()) != 'P'
    2dda:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    2dde:	fe 01       	movw	r30, r28
    2de0:	ee 57       	subi	r30, 0x7E	; 126
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 83       	st	Z, r24
    2de6:	fe 01       	movw	r30, r28
    2de8:	ee 57       	subi	r30, 0x7E	; 126
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	80 35       	cpi	r24, 0x50	; 80
    2df0:	31 f0       	breq	.+12     	; 0x2dfe <main+0x35c>
    2df2:	fe 01       	movw	r30, r28
    2df4:	ee 57       	subi	r30, 0x7E	; 126
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	88 35       	cpi	r24, 0x58	; 88
    2dfc:	71 f7       	brne	.-36     	; 0x2dda <main+0x338>
				 && Received_Key  != 'X');

		HLCD_VoidClear();
    2dfe:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
		if(Received_Key  == 'P')
    2e02:	fe 01       	movw	r30, r28
    2e04:	ee 57       	subi	r30, 0x7E	; 126
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	80 35       	cpi	r24, 0x50	; 80
    2e0c:	29 f4       	brne	.+10     	; 0x2e18 <main+0x376>
			{
				HLCD_VoidSendString("You can pass now");
    2e0e:	83 e9       	ldi	r24, 0x93	; 147
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    2e16:	0a c0       	rjmp	.+20     	; 0x2e2c <main+0x38a>
			}
		else if(Received_Key == 'X')
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ee 57       	subi	r30, 0x7E	; 126
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	88 35       	cpi	r24, 0x58	; 88
    2e22:	21 f4       	brne	.+8      	; 0x2e2c <main+0x38a>
			{
				HLCD_VoidSendString("You can't pass");
    2e24:	84 ea       	ldi	r24, 0xA4	; 164
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e3 59       	subi	r30, 0x93	; 147
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	aa e7       	ldi	r26, 0x7A	; 122
    2e38:	b4 e4       	ldi	r27, 0x44	; 68
    2e3a:	80 83       	st	Z, r24
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	a2 83       	std	Z+2, r26	; 0x02
    2e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	8e 01       	movw	r16, r28
    2e44:	07 59       	subi	r16, 0x97	; 151
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e3 59       	subi	r30, 0x93	; 147
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4a ef       	ldi	r20, 0xFA	; 250
    2e5c:	54 e4       	ldi	r21, 0x44	; 68
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	f8 01       	movw	r30, r16
    2e68:	80 83       	st	Z, r24
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	a2 83       	std	Z+2, r26	; 0x02
    2e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e70:	fe 01       	movw	r30, r28
    2e72:	e7 59       	subi	r30, 0x97	; 151
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	44 f4       	brge	.+16     	; 0x2e9e <main+0x3fc>
		__ticks = 1;
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e9 59       	subi	r30, 0x99	; 153
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
    2e9c:	64 c0       	rjmp	.+200    	; 0x2f66 <main+0x4c4>
	else if (__tmp > 65535)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 59       	subi	r30, 0x97	; 151
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	3f ef       	ldi	r19, 0xFF	; 255
    2eb0:	4f e7       	ldi	r20, 0x7F	; 127
    2eb2:	57 e4       	ldi	r21, 0x47	; 71
    2eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	0c f0       	brlt	.+2      	; 0x2ebe <main+0x41c>
    2ebc:	43 c0       	rjmp	.+134    	; 0x2f44 <main+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e3 59       	subi	r30, 0x93	; 147
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8e 01       	movw	r16, r28
    2ede:	09 59       	subi	r16, 0x99	; 153
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	f8 01       	movw	r30, r16
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
    2ef4:	1f c0       	rjmp	.+62     	; 0x2f34 <main+0x492>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	eb 59       	subi	r30, 0x9B	; 155
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	88 ec       	ldi	r24, 0xC8	; 200
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	80 83       	st	Z, r24
    2f04:	fe 01       	movw	r30, r28
    2f06:	eb 59       	subi	r30, 0x9B	; 155
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <main+0x46c>
    2f12:	fe 01       	movw	r30, r28
    2f14:	eb 59       	subi	r30, 0x9B	; 155
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	de 01       	movw	r26, r28
    2f1e:	a9 59       	subi	r26, 0x99	; 153
    2f20:	bf 4f       	sbci	r27, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	e9 59       	subi	r30, 0x99	; 153
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	11 96       	adiw	r26, 0x01	; 1
    2f30:	9c 93       	st	X, r25
    2f32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	fe 01       	movw	r30, r28
    2f36:	e9 59       	subi	r30, 0x99	; 153
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	d1 f6       	brne	.-76     	; 0x2ef6 <main+0x454>
    2f42:	27 c0       	rjmp	.+78     	; 0x2f92 <main+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	8e 01       	movw	r16, r28
    2f46:	09 59       	subi	r16, 0x99	; 153
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e7 59       	subi	r30, 0x97	; 151
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	f8 01       	movw	r30, r16
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    2f66:	de 01       	movw	r26, r28
    2f68:	ad 59       	subi	r26, 0x9D	; 157
    2f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e9 59       	subi	r30, 0x99	; 153
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	8d 93       	st	X+, r24
    2f78:	9c 93       	st	X, r25
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ed 59       	subi	r30, 0x9D	; 157
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <main+0x4e2>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ed 59       	subi	r30, 0x9D	; 157
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
			}
		_delay_ms(1000);
		HLCD_VoidClear();
    2f92:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
    2f96:	98 cd       	rjmp	.-1232   	; 0x2ac8 <main+0x26>

		break;

		case 2:
			HLCD_VoidClear();
    2f98:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			HLCD_VoidSendString("Welcome");
    2f9c:	80 e6       	ldi	r24, 0x60	; 96
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("Amr");
    2fac:	83 eb       	ldi	r24, 0xB3	; 179
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			MUART_VoidTransmit('B');
    2fb4:	82 e4       	ldi	r24, 0x42	; 66
    2fb6:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e1 5a       	subi	r30, 0xA1	; 161
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	aa e7       	ldi	r26, 0x7A	; 122
    2fc6:	b4 e4       	ldi	r27, 0x44	; 68
    2fc8:	80 83       	st	Z, r24
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	a2 83       	std	Z+2, r26	; 0x02
    2fce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	8e 01       	movw	r16, r28
    2fd2:	05 5a       	subi	r16, 0xA5	; 165
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e1 5a       	subi	r30, 0xA1	; 161
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	4a ef       	ldi	r20, 0xFA	; 250
    2fea:	54 e4       	ldi	r21, 0x44	; 68
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	80 83       	st	Z, r24
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	a2 83       	std	Z+2, r26	; 0x02
    2ffc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ffe:	fe 01       	movw	r30, r28
    3000:	e5 5a       	subi	r30, 0xA5	; 165
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	93 81       	ldd	r25, Z+3	; 0x03
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e8       	ldi	r20, 0x80	; 128
    3012:	5f e3       	ldi	r21, 0x3F	; 63
    3014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3018:	88 23       	and	r24, r24
    301a:	44 f4       	brge	.+16     	; 0x302c <main+0x58a>
		__ticks = 1;
    301c:	fe 01       	movw	r30, r28
    301e:	e7 5a       	subi	r30, 0xA7	; 167
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
    302a:	64 c0       	rjmp	.+200    	; 0x30f4 <main+0x652>
	else if (__tmp > 65535)
    302c:	fe 01       	movw	r30, r28
    302e:	e5 5a       	subi	r30, 0xA5	; 165
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	3f ef       	ldi	r19, 0xFF	; 255
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	57 e4       	ldi	r21, 0x47	; 71
    3042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3046:	18 16       	cp	r1, r24
    3048:	0c f0       	brlt	.+2      	; 0x304c <main+0x5aa>
    304a:	43 c0       	rjmp	.+134    	; 0x30d2 <main+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	fe 01       	movw	r30, r28
    304e:	e1 5a       	subi	r30, 0xA1	; 161
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	93 81       	ldd	r25, Z+3	; 0x03
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8e 01       	movw	r16, r28
    306c:	07 5a       	subi	r16, 0xA7	; 167
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	f8 01       	movw	r30, r16
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	1f c0       	rjmp	.+62     	; 0x30c2 <main+0x620>
    3084:	fe 01       	movw	r30, r28
    3086:	e9 5a       	subi	r30, 0xA9	; 169
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	88 ec       	ldi	r24, 0xC8	; 200
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
    3092:	fe 01       	movw	r30, r28
    3094:	e9 5a       	subi	r30, 0xA9	; 169
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 81       	ld	r24, Z
    309a:	91 81       	ldd	r25, Z+1	; 0x01
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <main+0x5fa>
    30a0:	fe 01       	movw	r30, r28
    30a2:	e9 5a       	subi	r30, 0xA9	; 169
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	de 01       	movw	r26, r28
    30ac:	a7 5a       	subi	r26, 0xA7	; 167
    30ae:	bf 4f       	sbci	r27, 0xFF	; 255
    30b0:	fe 01       	movw	r30, r28
    30b2:	e7 5a       	subi	r30, 0xA7	; 167
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	11 96       	adiw	r26, 0x01	; 1
    30be:	9c 93       	st	X, r25
    30c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c2:	fe 01       	movw	r30, r28
    30c4:	e7 5a       	subi	r30, 0xA7	; 167
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	d1 f6       	brne	.-76     	; 0x3084 <main+0x5e2>
    30d0:	27 c0       	rjmp	.+78     	; 0x3120 <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	8e 01       	movw	r16, r28
    30d4:	07 5a       	subi	r16, 0xA7	; 167
    30d6:	1f 4f       	sbci	r17, 0xFF	; 255
    30d8:	fe 01       	movw	r30, r28
    30da:	e5 5a       	subi	r30, 0xA5	; 165
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	f8 01       	movw	r30, r16
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	de 01       	movw	r26, r28
    30f6:	ab 5a       	subi	r26, 0xAB	; 171
    30f8:	bf 4f       	sbci	r27, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	e7 5a       	subi	r30, 0xA7	; 167
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	8d 93       	st	X+, r24
    3106:	9c 93       	st	X, r25
    3108:	fe 01       	movw	r30, r28
    310a:	eb 5a       	subi	r30, 0xAB	; 171
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <main+0x670>
    3116:	fe 01       	movw	r30, r28
    3118:	eb 5a       	subi	r30, 0xAB	; 171
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	80 83       	st	Z, r24

			_delay_ms(1000);

			HLCD_VoidClear();
    3120:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			HLCD_VoidSendString("Please wait for");
    3124:	84 e7       	ldi	r24, 0x74	; 116
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("admin approval");
    3134:	84 e8       	ldi	r24, 0x84	; 132
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>

			while ((Received_Key = MUART_u8Receive()) != 'P'
    313c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    3140:	fe 01       	movw	r30, r28
    3142:	ee 57       	subi	r30, 0x7E	; 126
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 83       	st	Z, r24
    3148:	fe 01       	movw	r30, r28
    314a:	ee 57       	subi	r30, 0x7E	; 126
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	80 35       	cpi	r24, 0x50	; 80
    3152:	31 f0       	breq	.+12     	; 0x3160 <main+0x6be>
    3154:	fe 01       	movw	r30, r28
    3156:	ee 57       	subi	r30, 0x7E	; 126
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	88 35       	cpi	r24, 0x58	; 88
    315e:	71 f7       	brne	.-36     	; 0x313c <main+0x69a>
				&& Received_Key  != 'X');

		HLCD_VoidClear();
    3160:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
		if(Received_Key  == 'P')
    3164:	fe 01       	movw	r30, r28
    3166:	ee 57       	subi	r30, 0x7E	; 126
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	80 35       	cpi	r24, 0x50	; 80
    316e:	29 f4       	brne	.+10     	; 0x317a <main+0x6d8>
			{
				HLCD_VoidSendString("You can pass now");
    3170:	83 e9       	ldi	r24, 0x93	; 147
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    3178:	0a c0       	rjmp	.+20     	; 0x318e <main+0x6ec>
			}
		else if(Received_Key == 'X')
    317a:	fe 01       	movw	r30, r28
    317c:	ee 57       	subi	r30, 0x7E	; 126
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	88 35       	cpi	r24, 0x58	; 88
    3184:	21 f4       	brne	.+8      	; 0x318e <main+0x6ec>
			{
				HLCD_VoidSendString("You can't pass");
    3186:	84 ea       	ldi	r24, 0xA4	; 164
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    318e:	fe 01       	movw	r30, r28
    3190:	ef 5a       	subi	r30, 0xAF	; 175
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	aa e7       	ldi	r26, 0x7A	; 122
    319a:	b4 e4       	ldi	r27, 0x44	; 68
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	8e 01       	movw	r16, r28
    31a6:	03 5b       	subi	r16, 0xB3	; 179
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	fe 01       	movw	r30, r28
    31ac:	ef 5a       	subi	r30, 0xAF	; 175
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	4a ef       	ldi	r20, 0xFA	; 250
    31be:	54 e4       	ldi	r21, 0x44	; 68
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	f8 01       	movw	r30, r16
    31ca:	80 83       	st	Z, r24
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	a2 83       	std	Z+2, r26	; 0x02
    31d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d2:	fe 01       	movw	r30, r28
    31d4:	e3 5b       	subi	r30, 0xB3	; 179
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	44 f4       	brge	.+16     	; 0x3200 <main+0x75e>
		__ticks = 1;
    31f0:	fe 01       	movw	r30, r28
    31f2:	e5 5b       	subi	r30, 0xB5	; 181
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
    31fe:	64 c0       	rjmp	.+200    	; 0x32c8 <main+0x826>
	else if (__tmp > 65535)
    3200:	fe 01       	movw	r30, r28
    3202:	e3 5b       	subi	r30, 0xB3	; 179
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	57 e4       	ldi	r21, 0x47	; 71
    3216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    321a:	18 16       	cp	r1, r24
    321c:	0c f0       	brlt	.+2      	; 0x3220 <main+0x77e>
    321e:	43 c0       	rjmp	.+134    	; 0x32a6 <main+0x804>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3220:	fe 01       	movw	r30, r28
    3222:	ef 5a       	subi	r30, 0xAF	; 175
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	8e 01       	movw	r16, r28
    3240:	05 5b       	subi	r16, 0xB5	; 181
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	f8 01       	movw	r30, r16
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	80 83       	st	Z, r24
    3256:	1f c0       	rjmp	.+62     	; 0x3296 <main+0x7f4>
    3258:	fe 01       	movw	r30, r28
    325a:	e7 5b       	subi	r30, 0xB7	; 183
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	80 83       	st	Z, r24
    3266:	fe 01       	movw	r30, r28
    3268:	e7 5b       	subi	r30, 0xB7	; 183
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <main+0x7ce>
    3274:	fe 01       	movw	r30, r28
    3276:	e7 5b       	subi	r30, 0xB7	; 183
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327e:	de 01       	movw	r26, r28
    3280:	a5 5b       	subi	r26, 0xB5	; 181
    3282:	bf 4f       	sbci	r27, 0xFF	; 255
    3284:	fe 01       	movw	r30, r28
    3286:	e5 5b       	subi	r30, 0xB5	; 181
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	11 96       	adiw	r26, 0x01	; 1
    3292:	9c 93       	st	X, r25
    3294:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	fe 01       	movw	r30, r28
    3298:	e5 5b       	subi	r30, 0xB5	; 181
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	d1 f6       	brne	.-76     	; 0x3258 <main+0x7b6>
    32a4:	27 c0       	rjmp	.+78     	; 0x32f4 <main+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	8e 01       	movw	r16, r28
    32a8:	05 5b       	subi	r16, 0xB5	; 181
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	e3 5b       	subi	r30, 0xB3	; 179
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	f8 01       	movw	r30, r16
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	de 01       	movw	r26, r28
    32ca:	a9 5b       	subi	r26, 0xB9	; 185
    32cc:	bf 4f       	sbci	r27, 0xFF	; 255
    32ce:	fe 01       	movw	r30, r28
    32d0:	e5 5b       	subi	r30, 0xB5	; 181
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	8d 93       	st	X+, r24
    32da:	9c 93       	st	X, r25
    32dc:	fe 01       	movw	r30, r28
    32de:	e9 5b       	subi	r30, 0xB9	; 185
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <main+0x844>
    32ea:	fe 01       	movw	r30, r28
    32ec:	e9 5b       	subi	r30, 0xB9	; 185
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
			}
		_delay_ms(1000);
		HLCD_VoidClear();
    32f4:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
    32f8:	e7 cb       	rjmp	.-2098   	; 0x2ac8 <main+0x26>


		break;

		case 3:
				HLCD_VoidClear();
    32fa:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
				HLCD_VoidSendString("Welcome");
    32fe:	80 e6       	ldi	r24, 0x60	; 96
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
				HLCD_VoidCursor(0,LINE1);
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	61 e0       	ldi	r22, 0x01	; 1
    330a:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
				HLCD_VoidSendString("Wael");
    330e:	87 eb       	ldi	r24, 0xB7	; 183
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
				MUART_VoidTransmit('W');
    3316:	87 e5       	ldi	r24, 0x57	; 87
    3318:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
    331c:	fe 01       	movw	r30, r28
    331e:	ed 5b       	subi	r30, 0xBD	; 189
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	aa e7       	ldi	r26, 0x7A	; 122
    3328:	b4 e4       	ldi	r27, 0x44	; 68
    332a:	80 83       	st	Z, r24
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	a2 83       	std	Z+2, r26	; 0x02
    3330:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3332:	8e 01       	movw	r16, r28
    3334:	01 5c       	subi	r16, 0xC1	; 193
    3336:	1f 4f       	sbci	r17, 0xFF	; 255
    3338:	fe 01       	movw	r30, r28
    333a:	ed 5b       	subi	r30, 0xBD	; 189
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	4a ef       	ldi	r20, 0xFA	; 250
    334c:	54 e4       	ldi	r21, 0x44	; 68
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	f8 01       	movw	r30, r16
    3358:	80 83       	st	Z, r24
    335a:	91 83       	std	Z+1, r25	; 0x01
    335c:	a2 83       	std	Z+2, r26	; 0x02
    335e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3360:	fe 01       	movw	r30, r28
    3362:	ff 96       	adiw	r30, 0x3f	; 63
    3364:	60 81       	ld	r22, Z
    3366:	71 81       	ldd	r23, Z+1	; 0x01
    3368:	82 81       	ldd	r24, Z+2	; 0x02
    336a:	93 81       	ldd	r25, Z+3	; 0x03
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	5f e3       	ldi	r21, 0x3F	; 63
    3374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3378:	88 23       	and	r24, r24
    337a:	2c f4       	brge	.+10     	; 0x3386 <main+0x8e4>
		__ticks = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9e af       	std	Y+62, r25	; 0x3e
    3382:	8d af       	std	Y+61, r24	; 0x3d
    3384:	46 c0       	rjmp	.+140    	; 0x3412 <main+0x970>
	else if (__tmp > 65535)
    3386:	fe 01       	movw	r30, r28
    3388:	ff 96       	adiw	r30, 0x3f	; 63
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	3f ef       	ldi	r19, 0xFF	; 255
    3396:	4f e7       	ldi	r20, 0x7F	; 127
    3398:	57 e4       	ldi	r21, 0x47	; 71
    339a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339e:	18 16       	cp	r1, r24
    33a0:	64 f5       	brge	.+88     	; 0x33fa <main+0x958>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a2:	fe 01       	movw	r30, r28
    33a4:	ed 5b       	subi	r30, 0xBD	; 189
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e2       	ldi	r20, 0x20	; 32
    33b6:	51 e4       	ldi	r21, 0x41	; 65
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	9e af       	std	Y+62, r25	; 0x3e
    33ce:	8d af       	std	Y+61, r24	; 0x3d
    33d0:	0f c0       	rjmp	.+30     	; 0x33f0 <main+0x94e>
    33d2:	88 ec       	ldi	r24, 0xC8	; 200
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9c af       	std	Y+60, r25	; 0x3c
    33d8:	8b af       	std	Y+59, r24	; 0x3b
    33da:	8b ad       	ldd	r24, Y+59	; 0x3b
    33dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	f1 f7       	brne	.-4      	; 0x33de <main+0x93c>
    33e2:	9c af       	std	Y+60, r25	; 0x3c
    33e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    33e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	9e af       	std	Y+62, r25	; 0x3e
    33ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    33f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	69 f7       	brne	.-38     	; 0x33d2 <main+0x930>
    33f8:	16 c0       	rjmp	.+44     	; 0x3426 <main+0x984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fa:	fe 01       	movw	r30, r28
    33fc:	ff 96       	adiw	r30, 0x3f	; 63
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	9e af       	std	Y+62, r25	; 0x3e
    3410:	8d af       	std	Y+61, r24	; 0x3d
    3412:	8d ad       	ldd	r24, Y+61	; 0x3d
    3414:	9e ad       	ldd	r25, Y+62	; 0x3e
    3416:	9a af       	std	Y+58, r25	; 0x3a
    3418:	89 af       	std	Y+57, r24	; 0x39
    341a:	89 ad       	ldd	r24, Y+57	; 0x39
    341c:	9a ad       	ldd	r25, Y+58	; 0x3a
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <main+0x97c>
    3422:	9a af       	std	Y+58, r25	; 0x3a
    3424:	89 af       	std	Y+57, r24	; 0x39

				_delay_ms(1000);

				HLCD_VoidClear();
    3426:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
				HLCD_VoidSendString("Please wait for");
    342a:	84 e7       	ldi	r24, 0x74	; 116
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
				HLCD_VoidCursor(0,LINE1);
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	61 e0       	ldi	r22, 0x01	; 1
    3436:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
				HLCD_VoidSendString("admin approval");
    343a:	84 e8       	ldi	r24, 0x84	; 132
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>

				while ((Received_Key = MUART_u8Receive()) != 'P'
    3442:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    3446:	fe 01       	movw	r30, r28
    3448:	ee 57       	subi	r30, 0x7E	; 126
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	80 83       	st	Z, r24
    344e:	fe 01       	movw	r30, r28
    3450:	ee 57       	subi	r30, 0x7E	; 126
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	80 35       	cpi	r24, 0x50	; 80
    3458:	31 f0       	breq	.+12     	; 0x3466 <main+0x9c4>
    345a:	fe 01       	movw	r30, r28
    345c:	ee 57       	subi	r30, 0x7E	; 126
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	88 35       	cpi	r24, 0x58	; 88
    3464:	71 f7       	brne	.-36     	; 0x3442 <main+0x9a0>
					 && Received_Key != 'X');

			HLCD_VoidClear();
    3466:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			if(Received_Key  == 'P')
    346a:	fe 01       	movw	r30, r28
    346c:	ee 57       	subi	r30, 0x7E	; 126
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	80 35       	cpi	r24, 0x50	; 80
    3474:	29 f4       	brne	.+10     	; 0x3480 <main+0x9de>
				{
					HLCD_VoidSendString("You can pass now");
    3476:	83 e9       	ldi	r24, 0x93	; 147
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    347e:	0a c0       	rjmp	.+20     	; 0x3494 <main+0x9f2>
				}
			else if(Received_Key == 'X')
    3480:	fe 01       	movw	r30, r28
    3482:	ee 57       	subi	r30, 0x7E	; 126
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	80 81       	ld	r24, Z
    3488:	88 35       	cpi	r24, 0x58	; 88
    348a:	21 f4       	brne	.+8      	; 0x3494 <main+0x9f2>
				{
					HLCD_VoidSendString("You can't pass");
    348c:	84 ea       	ldi	r24, 0xA4	; 164
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	aa e7       	ldi	r26, 0x7A	; 122
    349a:	b4 e4       	ldi	r27, 0x44	; 68
    349c:	8d ab       	std	Y+53, r24	; 0x35
    349e:	9e ab       	std	Y+54, r25	; 0x36
    34a0:	af ab       	std	Y+55, r26	; 0x37
    34a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a4:	6d a9       	ldd	r22, Y+53	; 0x35
    34a6:	7e a9       	ldd	r23, Y+54	; 0x36
    34a8:	8f a9       	ldd	r24, Y+55	; 0x37
    34aa:	98 ad       	ldd	r25, Y+56	; 0x38
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	4a ef       	ldi	r20, 0xFA	; 250
    34b2:	54 e4       	ldi	r21, 0x44	; 68
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	89 ab       	std	Y+49, r24	; 0x31
    34be:	9a ab       	std	Y+50, r25	; 0x32
    34c0:	ab ab       	std	Y+51, r26	; 0x33
    34c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34c4:	69 a9       	ldd	r22, Y+49	; 0x31
    34c6:	7a a9       	ldd	r23, Y+50	; 0x32
    34c8:	8b a9       	ldd	r24, Y+51	; 0x33
    34ca:	9c a9       	ldd	r25, Y+52	; 0x34
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e8       	ldi	r20, 0x80	; 128
    34d2:	5f e3       	ldi	r21, 0x3F	; 63
    34d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34d8:	88 23       	and	r24, r24
    34da:	2c f4       	brge	.+10     	; 0x34e6 <main+0xa44>
		__ticks = 1;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	98 ab       	std	Y+48, r25	; 0x30
    34e2:	8f a7       	std	Y+47, r24	; 0x2f
    34e4:	3f c0       	rjmp	.+126    	; 0x3564 <main+0xac2>
	else if (__tmp > 65535)
    34e6:	69 a9       	ldd	r22, Y+49	; 0x31
    34e8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ea:	8b a9       	ldd	r24, Y+51	; 0x33
    34ec:	9c a9       	ldd	r25, Y+52	; 0x34
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	3f ef       	ldi	r19, 0xFF	; 255
    34f2:	4f e7       	ldi	r20, 0x7F	; 127
    34f4:	57 e4       	ldi	r21, 0x47	; 71
    34f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fa:	18 16       	cp	r1, r24
    34fc:	4c f5       	brge	.+82     	; 0x3550 <main+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3500:	7e a9       	ldd	r23, Y+54	; 0x36
    3502:	8f a9       	ldd	r24, Y+55	; 0x37
    3504:	98 ad       	ldd	r25, Y+56	; 0x38
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e2       	ldi	r20, 0x20	; 32
    350c:	51 e4       	ldi	r21, 0x41	; 65
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	98 ab       	std	Y+48, r25	; 0x30
    3524:	8f a7       	std	Y+47, r24	; 0x2f
    3526:	0f c0       	rjmp	.+30     	; 0x3546 <main+0xaa4>
    3528:	88 ec       	ldi	r24, 0xC8	; 200
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	9e a7       	std	Y+46, r25	; 0x2e
    352e:	8d a7       	std	Y+45, r24	; 0x2d
    3530:	8d a5       	ldd	r24, Y+45	; 0x2d
    3532:	9e a5       	ldd	r25, Y+46	; 0x2e
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <main+0xa92>
    3538:	9e a7       	std	Y+46, r25	; 0x2e
    353a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353c:	8f a5       	ldd	r24, Y+47	; 0x2f
    353e:	98 a9       	ldd	r25, Y+48	; 0x30
    3540:	01 97       	sbiw	r24, 0x01	; 1
    3542:	98 ab       	std	Y+48, r25	; 0x30
    3544:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3546:	8f a5       	ldd	r24, Y+47	; 0x2f
    3548:	98 a9       	ldd	r25, Y+48	; 0x30
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	69 f7       	brne	.-38     	; 0x3528 <main+0xa86>
    354e:	14 c0       	rjmp	.+40     	; 0x3578 <main+0xad6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3550:	69 a9       	ldd	r22, Y+49	; 0x31
    3552:	7a a9       	ldd	r23, Y+50	; 0x32
    3554:	8b a9       	ldd	r24, Y+51	; 0x33
    3556:	9c a9       	ldd	r25, Y+52	; 0x34
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	98 ab       	std	Y+48, r25	; 0x30
    3562:	8f a7       	std	Y+47, r24	; 0x2f
    3564:	8f a5       	ldd	r24, Y+47	; 0x2f
    3566:	98 a9       	ldd	r25, Y+48	; 0x30
    3568:	9c a7       	std	Y+44, r25	; 0x2c
    356a:	8b a7       	std	Y+43, r24	; 0x2b
    356c:	8b a5       	ldd	r24, Y+43	; 0x2b
    356e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <main+0xace>
    3574:	9c a7       	std	Y+44, r25	; 0x2c
    3576:	8b a7       	std	Y+43, r24	; 0x2b
				}
			_delay_ms(1000);
			HLCD_VoidClear();
    3578:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
    357c:	a5 ca       	rjmp	.-2742   	; 0x2ac8 <main+0x26>
			break;


		default:

			HLCD_VoidClear();
    357e:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			HLCD_VoidCursor(0,LINE0);
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("Access denied");
    358a:	8c eb       	ldi	r24, 0xBC	; 188
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	61 e0       	ldi	r22, 0x01	; 1
    3596:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("Wait for admin");
    359a:	8a ec       	ldi	r24, 0xCA	; 202
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			MUART_VoidTransmit('D');
    35a2:	84 e4       	ldi	r24, 0x44	; 68
    35a4:	0e 94 b8 05 	call	0xb70	; 0xb70 <MUART_VoidTransmit>
			while ((Received_Key = MUART_u8Receive()) != 'A'
    35a8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MUART_u8Receive>
    35ac:	fe 01       	movw	r30, r28
    35ae:	ee 57       	subi	r30, 0x7E	; 126
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 83       	st	Z, r24
    35b4:	fe 01       	movw	r30, r28
    35b6:	ee 57       	subi	r30, 0x7E	; 126
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 81       	ld	r24, Z
    35bc:	81 34       	cpi	r24, 0x41	; 65
    35be:	31 f0       	breq	.+12     	; 0x35cc <main+0xb2a>
    35c0:	fe 01       	movw	r30, r28
    35c2:	ee 57       	subi	r30, 0x7E	; 126
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	88 35       	cpi	r24, 0x58	; 88
    35ca:	71 f7       	brne	.-36     	; 0x35a8 <main+0xb06>
				 && Received_Key != 'X');

			if( Received_Key == 'A' )
    35cc:	fe 01       	movw	r30, r28
    35ce:	ee 57       	subi	r30, 0x7E	; 126
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	80 81       	ld	r24, Z
    35d4:	81 34       	cpi	r24, 0x41	; 65
    35d6:	09 f0       	breq	.+2      	; 0x35da <main+0xb38>
    35d8:	fb c0       	rjmp	.+502    	; 0x37d0 <main+0xd2e>
			{
			HLCD_VoidClear();
    35da:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
			HLCD_VoidSendString("Access allowed");
    35de:	89 ed       	ldi	r24, 0xD9	; 217
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	aa e7       	ldi	r26, 0x7A	; 122
    35ec:	b4 e4       	ldi	r27, 0x44	; 68
    35ee:	8f a3       	std	Y+39, r24	; 0x27
    35f0:	98 a7       	std	Y+40, r25	; 0x28
    35f2:	a9 a7       	std	Y+41, r26	; 0x29
    35f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	6f a1       	ldd	r22, Y+39	; 0x27
    35f8:	78 a5       	ldd	r23, Y+40	; 0x28
    35fa:	89 a5       	ldd	r24, Y+41	; 0x29
    35fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a ef       	ldi	r20, 0xFA	; 250
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8b a3       	std	Y+35, r24	; 0x23
    3610:	9c a3       	std	Y+36, r25	; 0x24
    3612:	ad a3       	std	Y+37, r26	; 0x25
    3614:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3616:	6b a1       	ldd	r22, Y+35	; 0x23
    3618:	7c a1       	ldd	r23, Y+36	; 0x24
    361a:	8d a1       	ldd	r24, Y+37	; 0x25
    361c:	9e a1       	ldd	r25, Y+38	; 0x26
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <main+0xb96>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9a a3       	std	Y+34, r25	; 0x22
    3634:	89 a3       	std	Y+33, r24	; 0x21
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <main+0xc14>
	else if (__tmp > 65535)
    3638:	6b a1       	ldd	r22, Y+35	; 0x23
    363a:	7c a1       	ldd	r23, Y+36	; 0x24
    363c:	8d a1       	ldd	r24, Y+37	; 0x25
    363e:	9e a1       	ldd	r25, Y+38	; 0x26
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <main+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	6f a1       	ldd	r22, Y+39	; 0x27
    3652:	78 a5       	ldd	r23, Y+40	; 0x28
    3654:	89 a5       	ldd	r24, Y+41	; 0x29
    3656:	9a a5       	ldd	r25, Y+42	; 0x2a
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9a a3       	std	Y+34, r25	; 0x22
    3676:	89 a3       	std	Y+33, r24	; 0x21
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <main+0xbf6>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	98 a3       	std	Y+32, r25	; 0x20
    3680:	8f 8f       	std	Y+31, r24	; 0x1f
    3682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3684:	98 a1       	ldd	r25, Y+32	; 0x20
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <main+0xbe4>
    368a:	98 a3       	std	Y+32, r25	; 0x20
    368c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	89 a1       	ldd	r24, Y+33	; 0x21
    3690:	9a a1       	ldd	r25, Y+34	; 0x22
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9a a3       	std	Y+34, r25	; 0x22
    3696:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	89 a1       	ldd	r24, Y+33	; 0x21
    369a:	9a a1       	ldd	r25, Y+34	; 0x22
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <main+0xbd8>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <main+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6b a1       	ldd	r22, Y+35	; 0x23
    36a4:	7c a1       	ldd	r23, Y+36	; 0x24
    36a6:	8d a1       	ldd	r24, Y+37	; 0x25
    36a8:	9e a1       	ldd	r25, Y+38	; 0x26
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9a a3       	std	Y+34, r25	; 0x22
    36b4:	89 a3       	std	Y+33, r24	; 0x21
    36b6:	89 a1       	ldd	r24, Y+33	; 0x21
    36b8:	9a a1       	ldd	r25, Y+34	; 0x22
    36ba:	9e 8f       	std	Y+30, r25	; 0x1e
    36bc:	8d 8f       	std	Y+29, r24	; 0x1d
    36be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <main+0xc20>
    36c6:	9e 8f       	std	Y+30, r25	; 0x1e
    36c8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			HLCD_VoidClear();
    36ca:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>

			HLCD_VoidSendString("Re-enter your");
    36ce:	88 ee       	ldi	r24, 0xE8	; 232
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
			HLCD_VoidCursor(0,LINE1);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
			HLCD_VoidSendString("ID and Password");
    36de:	86 ef       	ldi	r24, 0xF6	; 246
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	aa e7       	ldi	r26, 0x7A	; 122
    36ec:	b4 e4       	ldi	r27, 0x44	; 68
    36ee:	89 8f       	std	Y+25, r24	; 0x19
    36f0:	9a 8f       	std	Y+26, r25	; 0x1a
    36f2:	ab 8f       	std	Y+27, r26	; 0x1b
    36f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f6:	69 8d       	ldd	r22, Y+25	; 0x19
    36f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	4a ef       	ldi	r20, 0xFA	; 250
    3704:	54 e4       	ldi	r21, 0x44	; 68
    3706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	8d 8b       	std	Y+21, r24	; 0x15
    3710:	9e 8b       	std	Y+22, r25	; 0x16
    3712:	af 8b       	std	Y+23, r26	; 0x17
    3714:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3716:	6d 89       	ldd	r22, Y+21	; 0x15
    3718:	7e 89       	ldd	r23, Y+22	; 0x16
    371a:	8f 89       	ldd	r24, Y+23	; 0x17
    371c:	98 8d       	ldd	r25, Y+24	; 0x18
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e8       	ldi	r20, 0x80	; 128
    3724:	5f e3       	ldi	r21, 0x3F	; 63
    3726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372a:	88 23       	and	r24, r24
    372c:	2c f4       	brge	.+10     	; 0x3738 <main+0xc96>
		__ticks = 1;
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	9c 8b       	std	Y+20, r25	; 0x14
    3734:	8b 8b       	std	Y+19, r24	; 0x13
    3736:	3f c0       	rjmp	.+126    	; 0x37b6 <main+0xd14>
	else if (__tmp > 65535)
    3738:	6d 89       	ldd	r22, Y+21	; 0x15
    373a:	7e 89       	ldd	r23, Y+22	; 0x16
    373c:	8f 89       	ldd	r24, Y+23	; 0x17
    373e:	98 8d       	ldd	r25, Y+24	; 0x18
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	3f ef       	ldi	r19, 0xFF	; 255
    3744:	4f e7       	ldi	r20, 0x7F	; 127
    3746:	57 e4       	ldi	r21, 0x47	; 71
    3748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374c:	18 16       	cp	r1, r24
    374e:	4c f5       	brge	.+82     	; 0x37a2 <main+0xd00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3750:	69 8d       	ldd	r22, Y+25	; 0x19
    3752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e2       	ldi	r20, 0x20	; 32
    375e:	51 e4       	ldi	r21, 0x41	; 65
    3760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	9c 8b       	std	Y+20, r25	; 0x14
    3776:	8b 8b       	std	Y+19, r24	; 0x13
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <main+0xcf6>
    377a:	88 ec       	ldi	r24, 0xC8	; 200
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	9a 8b       	std	Y+18, r25	; 0x12
    3780:	89 8b       	std	Y+17, r24	; 0x11
    3782:	89 89       	ldd	r24, Y+17	; 0x11
    3784:	9a 89       	ldd	r25, Y+18	; 0x12
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	f1 f7       	brne	.-4      	; 0x3786 <main+0xce4>
    378a:	9a 8b       	std	Y+18, r25	; 0x12
    378c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378e:	8b 89       	ldd	r24, Y+19	; 0x13
    3790:	9c 89       	ldd	r25, Y+20	; 0x14
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	9c 8b       	std	Y+20, r25	; 0x14
    3796:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3798:	8b 89       	ldd	r24, Y+19	; 0x13
    379a:	9c 89       	ldd	r25, Y+20	; 0x14
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	69 f7       	brne	.-38     	; 0x377a <main+0xcd8>
    37a0:	14 c0       	rjmp	.+40     	; 0x37ca <main+0xd28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a2:	6d 89       	ldd	r22, Y+21	; 0x15
    37a4:	7e 89       	ldd	r23, Y+22	; 0x16
    37a6:	8f 89       	ldd	r24, Y+23	; 0x17
    37a8:	98 8d       	ldd	r25, Y+24	; 0x18
    37aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	9c 8b       	std	Y+20, r25	; 0x14
    37b4:	8b 8b       	std	Y+19, r24	; 0x13
    37b6:	8b 89       	ldd	r24, Y+19	; 0x13
    37b8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ba:	98 8b       	std	Y+16, r25	; 0x10
    37bc:	8f 87       	std	Y+15, r24	; 0x0f
    37be:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c0:	98 89       	ldd	r25, Y+16	; 0x10
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <main+0xd20>
    37c6:	98 8b       	std	Y+16, r25	; 0x10
    37c8:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1000);
			HLCD_VoidClear();
    37ca:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
    37ce:	7c c9       	rjmp	.-3336   	; 0x2ac8 <main+0x26>
			}
			else if( Received_Key == 'X' )
    37d0:	fe 01       	movw	r30, r28
    37d2:	ee 57       	subi	r30, 0x7E	; 126
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 81       	ld	r24, Z
    37d8:	88 35       	cpi	r24, 0x58	; 88
    37da:	09 f0       	breq	.+2      	; 0x37de <main+0xd3c>
    37dc:	75 c9       	rjmp	.-3350   	; 0x2ac8 <main+0x26>
			{
			HLCD_VoidClear();
    37de:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
				HLCD_VoidSendString("You can't pass");
    37e2:	84 ea       	ldi	r24, 0xA4	; 164
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e8       	ldi	r25, 0x80	; 128
    37ee:	ab eb       	ldi	r26, 0xBB	; 187
    37f0:	b4 e4       	ldi	r27, 0x44	; 68
    37f2:	8b 87       	std	Y+11, r24	; 0x0b
    37f4:	9c 87       	std	Y+12, r25	; 0x0c
    37f6:	ad 87       	std	Y+13, r26	; 0x0d
    37f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    37fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3800:	9e 85       	ldd	r25, Y+14	; 0x0e
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	4a ef       	ldi	r20, 0xFA	; 250
    3808:	54 e4       	ldi	r21, 0x44	; 68
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	8f 83       	std	Y+7, r24	; 0x07
    3814:	98 87       	std	Y+8, r25	; 0x08
    3816:	a9 87       	std	Y+9, r26	; 0x09
    3818:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    381a:	6f 81       	ldd	r22, Y+7	; 0x07
    381c:	78 85       	ldd	r23, Y+8	; 0x08
    381e:	89 85       	ldd	r24, Y+9	; 0x09
    3820:	9a 85       	ldd	r25, Y+10	; 0x0a
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e8       	ldi	r20, 0x80	; 128
    3828:	5f e3       	ldi	r21, 0x3F	; 63
    382a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    382e:	88 23       	and	r24, r24
    3830:	2c f4       	brge	.+10     	; 0x383c <main+0xd9a>
		__ticks = 1;
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9e 83       	std	Y+6, r25	; 0x06
    3838:	8d 83       	std	Y+5, r24	; 0x05
    383a:	3f c0       	rjmp	.+126    	; 0x38ba <main+0xe18>
	else if (__tmp > 65535)
    383c:	6f 81       	ldd	r22, Y+7	; 0x07
    383e:	78 85       	ldd	r23, Y+8	; 0x08
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	9a 85       	ldd	r25, Y+10	; 0x0a
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	4f e7       	ldi	r20, 0x7F	; 127
    384a:	57 e4       	ldi	r21, 0x47	; 71
    384c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3850:	18 16       	cp	r1, r24
    3852:	4c f5       	brge	.+82     	; 0x38a6 <main+0xe04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3854:	6b 85       	ldd	r22, Y+11	; 0x0b
    3856:	7c 85       	ldd	r23, Y+12	; 0x0c
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e2       	ldi	r20, 0x20	; 32
    3862:	51 e4       	ldi	r21, 0x41	; 65
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	9e 83       	std	Y+6, r25	; 0x06
    387a:	8d 83       	std	Y+5, r24	; 0x05
    387c:	0f c0       	rjmp	.+30     	; 0x389c <main+0xdfa>
    387e:	88 ec       	ldi	r24, 0xC8	; 200
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9c 83       	std	Y+4, r25	; 0x04
    3884:	8b 83       	std	Y+3, r24	; 0x03
    3886:	8b 81       	ldd	r24, Y+3	; 0x03
    3888:	9c 81       	ldd	r25, Y+4	; 0x04
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <main+0xde8>
    388e:	9c 83       	std	Y+4, r25	; 0x04
    3890:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3892:	8d 81       	ldd	r24, Y+5	; 0x05
    3894:	9e 81       	ldd	r25, Y+6	; 0x06
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	9e 81       	ldd	r25, Y+6	; 0x06
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	69 f7       	brne	.-38     	; 0x387e <main+0xddc>
    38a4:	14 c0       	rjmp	.+40     	; 0x38ce <main+0xe2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a6:	6f 81       	ldd	r22, Y+7	; 0x07
    38a8:	78 85       	ldd	r23, Y+8	; 0x08
    38aa:	89 85       	ldd	r24, Y+9	; 0x09
    38ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9e 83       	std	Y+6, r25	; 0x06
    38b8:	8d 83       	std	Y+5, r24	; 0x05
    38ba:	8d 81       	ldd	r24, Y+5	; 0x05
    38bc:	9e 81       	ldd	r25, Y+6	; 0x06
    38be:	9a 83       	std	Y+2, r25	; 0x02
    38c0:	89 83       	std	Y+1, r24	; 0x01
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	9a 81       	ldd	r25, Y+2	; 0x02
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	f1 f7       	brne	.-4      	; 0x38c6 <main+0xe24>
    38ca:	9a 83       	std	Y+2, r25	; 0x02
    38cc:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(1500);
			HLCD_VoidClear();
    38ce:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
    38d2:	fa c8       	rjmp	.-3596   	; 0x2ac8 <main+0x26>

000038d4 <GetNumber>:
}



u16 GetNumber()
{
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	00 d0       	rcall	.+0      	; 0x38da <GetNumber+0x6>
    38da:	0f 92       	push	r0
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
	u16 L_Number=0;
    38e0:	1b 82       	std	Y+3, r1	; 0x03
    38e2:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_PressedKey=0;
    38e4:	19 82       	std	Y+1, r1	; 0x01

	L_PressedKey=HKPD_u8GetPressedKey();
    38e6:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	03 c0       	rjmp	.+6      	; 0x38f4 <GetNumber+0x20>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    38ee:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    38f2:	89 83       	std	Y+1, r24	; 0x01
{
	u16 L_Number=0;
	u8 L_PressedKey=0;

	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	8a 32       	cpi	r24, 0x2A	; 42
    38f8:	d1 f3       	breq	.-12     	; 0x38ee <GetNumber+0x1a>
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	83 32       	cpi	r24, 0x23	; 35
    38fe:	b9 f3       	breq	.-18     	; 0x38ee <GetNumber+0x1a>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
	L_Number = (L_PressedKey-'0')*1000;
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	88 2f       	mov	r24, r24
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	9c 01       	movw	r18, r24
    390e:	20 53       	subi	r18, 0x30	; 48
    3910:	30 40       	sbci	r19, 0x00	; 0
    3912:	88 ee       	ldi	r24, 0xE8	; 232
    3914:	93 e0       	ldi	r25, 0x03	; 3
    3916:	ac 01       	movw	r20, r24
    3918:	24 9f       	mul	r18, r20
    391a:	c0 01       	movw	r24, r0
    391c:	25 9f       	mul	r18, r21
    391e:	90 0d       	add	r25, r0
    3920:	34 9f       	mul	r19, r20
    3922:	90 0d       	add	r25, r0
    3924:	11 24       	eor	r1, r1
    3926:	9b 83       	std	Y+3, r25	; 0x03
    3928:	8a 83       	std	Y+2, r24	; 0x02


	L_PressedKey=HKPD_u8GetPressedKey();
    392a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	03 c0       	rjmp	.+6      	; 0x3938 <GetNumber+0x64>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    3932:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    3936:	89 83       	std	Y+1, r24	; 0x01
	HLCD_VoidSendData(L_PressedKey);
	L_Number = (L_PressedKey-'0')*1000;


	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	8a 32       	cpi	r24, 0x2A	; 42
    393c:	d1 f3       	breq	.-12     	; 0x3932 <GetNumber+0x5e>
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	83 32       	cpi	r24, 0x23	; 35
    3942:	b9 f3       	breq	.-18     	; 0x3932 <GetNumber+0x5e>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
	L_Number += ((L_PressedKey-'0')*100);
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	28 2f       	mov	r18, r24
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	84 e6       	ldi	r24, 0x64	; 100
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	ac 01       	movw	r20, r24
    3956:	24 9f       	mul	r18, r20
    3958:	c0 01       	movw	r24, r0
    395a:	25 9f       	mul	r18, r21
    395c:	90 0d       	add	r25, r0
    395e:	34 9f       	mul	r19, r20
    3960:	90 0d       	add	r25, r0
    3962:	11 24       	eor	r1, r1
    3964:	9c 01       	movw	r18, r24
    3966:	8a 81       	ldd	r24, Y+2	; 0x02
    3968:	9b 81       	ldd	r25, Y+3	; 0x03
    396a:	82 0f       	add	r24, r18
    396c:	93 1f       	adc	r25, r19
    396e:	80 5c       	subi	r24, 0xC0	; 192
    3970:	92 41       	sbci	r25, 0x12	; 18
    3972:	9b 83       	std	Y+3, r25	; 0x03
    3974:	8a 83       	std	Y+2, r24	; 0x02

	L_PressedKey=HKPD_u8GetPressedKey();
    3976:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    397a:	89 83       	std	Y+1, r24	; 0x01
    397c:	03 c0       	rjmp	.+6      	; 0x3984 <GetNumber+0xb0>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    397e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    3982:	89 83       	std	Y+1, r24	; 0x01
	}
	HLCD_VoidSendData(L_PressedKey);
	L_Number += ((L_PressedKey-'0')*100);

	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	8a 32       	cpi	r24, 0x2A	; 42
    3988:	d1 f3       	breq	.-12     	; 0x397e <GetNumber+0xaa>
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	83 32       	cpi	r24, 0x23	; 35
    398e:	b9 f3       	breq	.-18     	; 0x397e <GetNumber+0xaa>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
	L_Number += ((L_PressedKey-'0')*10);
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	9c 01       	movw	r18, r24
    399e:	22 0f       	add	r18, r18
    39a0:	33 1f       	adc	r19, r19
    39a2:	c9 01       	movw	r24, r18
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	82 0f       	add	r24, r18
    39ae:	93 1f       	adc	r25, r19
    39b0:	9c 01       	movw	r18, r24
    39b2:	8a 81       	ldd	r24, Y+2	; 0x02
    39b4:	9b 81       	ldd	r25, Y+3	; 0x03
    39b6:	82 0f       	add	r24, r18
    39b8:	93 1f       	adc	r25, r19
    39ba:	80 5e       	subi	r24, 0xE0	; 224
    39bc:	91 40       	sbci	r25, 0x01	; 1
    39be:	9b 83       	std	Y+3, r25	; 0x03
    39c0:	8a 83       	std	Y+2, r24	; 0x02


	L_PressedKey=HKPD_u8GetPressedKey();
    39c2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    39c6:	89 83       	std	Y+1, r24	; 0x01
    39c8:	03 c0       	rjmp	.+6      	; 0x39d0 <GetNumber+0xfc>
	while(L_PressedKey == '*' || L_PressedKey == '#' )
	{
		L_PressedKey=HKPD_u8GetPressedKey();
    39ca:	0e 94 7f 14 	call	0x28fe	; 0x28fe <HKPD_u8GetPressedKey>
    39ce:	89 83       	std	Y+1, r24	; 0x01
	HLCD_VoidSendData(L_PressedKey);
	L_Number += ((L_PressedKey-'0')*10);


	L_PressedKey=HKPD_u8GetPressedKey();
	while(L_PressedKey == '*' || L_PressedKey == '#' )
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	8a 32       	cpi	r24, 0x2A	; 42
    39d4:	d1 f3       	breq	.-12     	; 0x39ca <GetNumber+0xf6>
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	83 32       	cpi	r24, 0x23	; 35
    39da:	b9 f3       	breq	.-18     	; 0x39ca <GetNumber+0xf6>
	{
		L_PressedKey=HKPD_u8GetPressedKey();
	}
	HLCD_VoidSendData(L_PressedKey);
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <HLCD_VoidSendData>
	L_Number += (L_PressedKey-'0');
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	82 0f       	add	r24, r18
    39ee:	93 1f       	adc	r25, r19
    39f0:	c0 97       	sbiw	r24, 0x30	; 48
    39f2:	9b 83       	std	Y+3, r25	; 0x03
    39f4:	8a 83       	std	Y+2, r24	; 0x02

	return L_Number;
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <CheckID>:

u8 CheckID()
{
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	a5 97       	sbiw	r28, 0x25	; 37
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
	u16 L_ID, id1=1234, id2=5678, id3=7891;
    3a1a:	82 ed       	ldi	r24, 0xD2	; 210
    3a1c:	94 e0       	ldi	r25, 0x04	; 4
    3a1e:	9a a3       	std	Y+34, r25	; 0x22
    3a20:	89 a3       	std	Y+33, r24	; 0x21
    3a22:	8e e2       	ldi	r24, 0x2E	; 46
    3a24:	96 e1       	ldi	r25, 0x16	; 22
    3a26:	98 a3       	std	Y+32, r25	; 0x20
    3a28:	8f 8f       	std	Y+31, r24	; 0x1f
    3a2a:	83 ed       	ldi	r24, 0xD3	; 211
    3a2c:	9e e1       	ldi	r25, 0x1E	; 30
    3a2e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a30:	8d 8f       	std	Y+29, r24	; 0x1d

	HLCD_VoidClear();
    3a32:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
	HLCD_VoidSendString("Please enter ID:");
    3a36:	86 e0       	ldi	r24, 0x06	; 6
    3a38:	91 e0       	ldi	r25, 0x01	; 1
    3a3a:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
	HLCD_VoidCursor(0,LINE1);
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	61 e0       	ldi	r22, 0x01	; 1
    3a42:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
	L_ID=GetNumber();
    3a46:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <GetNumber>
    3a4a:	9c a3       	std	Y+36, r25	; 0x24
    3a4c:	8b a3       	std	Y+35, r24	; 0x23

	if		( L_ID==id1 )	{	return 1;	}
    3a4e:	2b a1       	ldd	r18, Y+35	; 0x23
    3a50:	3c a1       	ldd	r19, Y+36	; 0x24
    3a52:	89 a1       	ldd	r24, Y+33	; 0x21
    3a54:	9a a1       	ldd	r25, Y+34	; 0x22
    3a56:	28 17       	cp	r18, r24
    3a58:	39 07       	cpc	r19, r25
    3a5a:	19 f4       	brne	.+6      	; 0x3a62 <CheckID+0x5c>
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	8d a3       	std	Y+37, r24	; 0x25
    3a60:	00 c1       	rjmp	.+512    	; 0x3c62 <CheckID+0x25c>
	else if	( L_ID==id2 )	{	return 2;	}
    3a62:	2b a1       	ldd	r18, Y+35	; 0x23
    3a64:	3c a1       	ldd	r19, Y+36	; 0x24
    3a66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a68:	98 a1       	ldd	r25, Y+32	; 0x20
    3a6a:	28 17       	cp	r18, r24
    3a6c:	39 07       	cpc	r19, r25
    3a6e:	19 f4       	brne	.+6      	; 0x3a76 <CheckID+0x70>
    3a70:	82 e0       	ldi	r24, 0x02	; 2
    3a72:	8d a3       	std	Y+37, r24	; 0x25
    3a74:	f6 c0       	rjmp	.+492    	; 0x3c62 <CheckID+0x25c>
	else if ( L_ID==id3 )	{	return 3;	}
    3a76:	2b a1       	ldd	r18, Y+35	; 0x23
    3a78:	3c a1       	ldd	r19, Y+36	; 0x24
    3a7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a7e:	28 17       	cp	r18, r24
    3a80:	39 07       	cpc	r19, r25
    3a82:	19 f4       	brne	.+6      	; 0x3a8a <CheckID+0x84>
    3a84:	83 e0       	ldi	r24, 0x03	; 3
    3a86:	8d a3       	std	Y+37, r24	; 0x25
    3a88:	ec c0       	rjmp	.+472    	; 0x3c62 <CheckID+0x25c>
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	aa ef       	ldi	r26, 0xFA	; 250
    3a90:	b3 e4       	ldi	r27, 0x43	; 67
    3a92:	89 8f       	std	Y+25, r24	; 0x19
    3a94:	9a 8f       	std	Y+26, r25	; 0x1a
    3a96:	ab 8f       	std	Y+27, r26	; 0x1b
    3a98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	4a ef       	ldi	r20, 0xFA	; 250
    3aa8:	54 e4       	ldi	r21, 0x44	; 68
    3aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	8d 8b       	std	Y+21, r24	; 0x15
    3ab4:	9e 8b       	std	Y+22, r25	; 0x16
    3ab6:	af 8b       	std	Y+23, r26	; 0x17
    3ab8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3aba:	6d 89       	ldd	r22, Y+21	; 0x15
    3abc:	7e 89       	ldd	r23, Y+22	; 0x16
    3abe:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e8       	ldi	r20, 0x80	; 128
    3ac8:	5f e3       	ldi	r21, 0x3F	; 63
    3aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ace:	88 23       	and	r24, r24
    3ad0:	2c f4       	brge	.+10     	; 0x3adc <CheckID+0xd6>
		__ticks = 1;
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	9c 8b       	std	Y+20, r25	; 0x14
    3ad8:	8b 8b       	std	Y+19, r24	; 0x13
    3ada:	3f c0       	rjmp	.+126    	; 0x3b5a <CheckID+0x154>
	else if (__tmp > 65535)
    3adc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ade:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	3f ef       	ldi	r19, 0xFF	; 255
    3ae8:	4f e7       	ldi	r20, 0x7F	; 127
    3aea:	57 e4       	ldi	r21, 0x47	; 71
    3aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3af0:	18 16       	cp	r1, r24
    3af2:	4c f5       	brge	.+82     	; 0x3b46 <CheckID+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af4:	69 8d       	ldd	r22, Y+25	; 0x19
    3af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	40 e2       	ldi	r20, 0x20	; 32
    3b02:	51 e4       	ldi	r21, 0x41	; 65
    3b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	bc 01       	movw	r22, r24
    3b0e:	cd 01       	movw	r24, r26
    3b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	9c 8b       	std	Y+20, r25	; 0x14
    3b1a:	8b 8b       	std	Y+19, r24	; 0x13
    3b1c:	0f c0       	rjmp	.+30     	; 0x3b3c <CheckID+0x136>
    3b1e:	88 ec       	ldi	r24, 0xC8	; 200
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	9a 8b       	std	Y+18, r25	; 0x12
    3b24:	89 8b       	std	Y+17, r24	; 0x11
    3b26:	89 89       	ldd	r24, Y+17	; 0x11
    3b28:	9a 89       	ldd	r25, Y+18	; 0x12
    3b2a:	01 97       	sbiw	r24, 0x01	; 1
    3b2c:	f1 f7       	brne	.-4      	; 0x3b2a <CheckID+0x124>
    3b2e:	9a 8b       	std	Y+18, r25	; 0x12
    3b30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b32:	8b 89       	ldd	r24, Y+19	; 0x13
    3b34:	9c 89       	ldd	r25, Y+20	; 0x14
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	9c 8b       	std	Y+20, r25	; 0x14
    3b3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b40:	00 97       	sbiw	r24, 0x00	; 0
    3b42:	69 f7       	brne	.-38     	; 0x3b1e <CheckID+0x118>
    3b44:	14 c0       	rjmp	.+40     	; 0x3b6e <CheckID+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b46:	6d 89       	ldd	r22, Y+21	; 0x15
    3b48:	7e 89       	ldd	r23, Y+22	; 0x16
    3b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	9c 8b       	std	Y+20, r25	; 0x14
    3b58:	8b 8b       	std	Y+19, r24	; 0x13
    3b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5e:	98 8b       	std	Y+16, r25	; 0x10
    3b60:	8f 87       	std	Y+15, r24	; 0x0f
    3b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b64:	98 89       	ldd	r25, Y+16	; 0x10
    3b66:	01 97       	sbiw	r24, 0x01	; 1
    3b68:	f1 f7       	brne	.-4      	; 0x3b66 <CheckID+0x160>
    3b6a:	98 8b       	std	Y+16, r25	; 0x10
    3b6c:	8f 87       	std	Y+15, r24	; 0x0f
	else
	{
		_delay_ms(500);
		HLCD_VoidClear();
    3b6e:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
		HLCD_VoidSendString("Wrong ID");
    3b72:	87 e1       	ldi	r24, 0x17	; 23
    3b74:	91 e0       	ldi	r25, 0x01	; 1
    3b76:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	90 e8       	ldi	r25, 0x80	; 128
    3b7e:	ab eb       	ldi	r26, 0xBB	; 187
    3b80:	b4 e4       	ldi	r27, 0x44	; 68
    3b82:	8b 87       	std	Y+11, r24	; 0x0b
    3b84:	9c 87       	std	Y+12, r25	; 0x0c
    3b86:	ad 87       	std	Y+13, r26	; 0x0d
    3b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	4a ef       	ldi	r20, 0xFA	; 250
    3b98:	54 e4       	ldi	r21, 0x44	; 68
    3b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	8f 83       	std	Y+7, r24	; 0x07
    3ba4:	98 87       	std	Y+8, r25	; 0x08
    3ba6:	a9 87       	std	Y+9, r26	; 0x09
    3ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3baa:	6f 81       	ldd	r22, Y+7	; 0x07
    3bac:	78 85       	ldd	r23, Y+8	; 0x08
    3bae:	89 85       	ldd	r24, Y+9	; 0x09
    3bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e8       	ldi	r20, 0x80	; 128
    3bb8:	5f e3       	ldi	r21, 0x3F	; 63
    3bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bbe:	88 23       	and	r24, r24
    3bc0:	2c f4       	brge	.+10     	; 0x3bcc <CheckID+0x1c6>
		__ticks = 1;
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9e 83       	std	Y+6, r25	; 0x06
    3bc8:	8d 83       	std	Y+5, r24	; 0x05
    3bca:	3f c0       	rjmp	.+126    	; 0x3c4a <CheckID+0x244>
	else if (__tmp > 65535)
    3bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bce:	78 85       	ldd	r23, Y+8	; 0x08
    3bd0:	89 85       	ldd	r24, Y+9	; 0x09
    3bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	3f ef       	ldi	r19, 0xFF	; 255
    3bd8:	4f e7       	ldi	r20, 0x7F	; 127
    3bda:	57 e4       	ldi	r21, 0x47	; 71
    3bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3be0:	18 16       	cp	r1, r24
    3be2:	4c f5       	brge	.+82     	; 0x3c36 <CheckID+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e2       	ldi	r20, 0x20	; 32
    3bf2:	51 e4       	ldi	r21, 0x41	; 65
    3bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	bc 01       	movw	r22, r24
    3bfe:	cd 01       	movw	r24, r26
    3c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	8d 83       	std	Y+5, r24	; 0x05
    3c0c:	0f c0       	rjmp	.+30     	; 0x3c2c <CheckID+0x226>
    3c0e:	88 ec       	ldi	r24, 0xC8	; 200
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	9c 83       	std	Y+4, r25	; 0x04
    3c14:	8b 83       	std	Y+3, r24	; 0x03
    3c16:	8b 81       	ldd	r24, Y+3	; 0x03
    3c18:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <CheckID+0x214>
    3c1e:	9c 83       	std	Y+4, r25	; 0x04
    3c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	9e 81       	ldd	r25, Y+6	; 0x06
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	69 f7       	brne	.-38     	; 0x3c0e <CheckID+0x208>
    3c34:	14 c0       	rjmp	.+40     	; 0x3c5e <CheckID+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c36:	6f 81       	ldd	r22, Y+7	; 0x07
    3c38:	78 85       	ldd	r23, Y+8	; 0x08
    3c3a:	89 85       	ldd	r24, Y+9	; 0x09
    3c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	9e 83       	std	Y+6, r25	; 0x06
    3c48:	8d 83       	std	Y+5, r24	; 0x05
    3c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4e:	9a 83       	std	Y+2, r25	; 0x02
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	9a 81       	ldd	r25, Y+2	; 0x02
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	f1 f7       	brne	.-4      	; 0x3c56 <CheckID+0x250>
    3c5a:	9a 83       	std	Y+2, r25	; 0x02
    3c5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);

		return 11;
    3c5e:	8b e0       	ldi	r24, 0x0B	; 11
    3c60:	8d a3       	std	Y+37, r24	; 0x25
    3c62:	8d a1       	ldd	r24, Y+37	; 0x25
	}

}
    3c64:	a5 96       	adiw	r28, 0x25	; 37
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <CheckPassword>:
u8 CheckPassword( u8 A_Bool )
{
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	68 97       	sbiw	r28, 0x18	; 24
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	8f 8b       	std	Y+23, r24	; 0x17
	u16 pass1=4321 /* Ahmed  */	,
    3c8c:	81 ee       	ldi	r24, 0xE1	; 225
    3c8e:	90 e1       	ldi	r25, 0x10	; 16
    3c90:	9e 8b       	std	Y+22, r25	; 0x16
    3c92:	8d 8b       	std	Y+21, r24	; 0x15
		pass2=8765 /*  Nour  */	,
    3c94:	8d e3       	ldi	r24, 0x3D	; 61
    3c96:	92 e2       	ldi	r25, 0x22	; 34
    3c98:	9c 8b       	std	Y+20, r25	; 0x14
    3c9a:	8b 8b       	std	Y+19, r24	; 0x13
		pass3=1987 /* Khaled */ ;
    3c9c:	83 ec       	ldi	r24, 0xC3	; 195
    3c9e:	97 e0       	ldi	r25, 0x07	; 7
    3ca0:	9a 8b       	std	Y+18, r25	; 0x12
    3ca2:	89 8b       	std	Y+17, r24	; 0x11

	u16 L_Pass;

	HLCD_VoidClear();
    3ca4:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
	HLCD_VoidSendString("Enter Password:");
    3ca8:	80 e2       	ldi	r24, 0x20	; 32
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
	HLCD_VoidCursor(0,LINE1);
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	0e 94 9a 12 	call	0x2534	; 0x2534 <HLCD_VoidCursor>
	L_Pass=GetNumber();
    3cb8:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <GetNumber>
    3cbc:	98 8b       	std	Y+16, r25	; 0x10
    3cbe:	8f 87       	std	Y+15, r24	; 0x0f

	if		(A_Bool == 1 && L_Pass==pass1 )	{	return 1;	}
    3cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cc2:	81 30       	cpi	r24, 0x01	; 1
    3cc4:	51 f4       	brne	.+20     	; 0x3cda <CheckPassword+0x64>
    3cc6:	2f 85       	ldd	r18, Y+15	; 0x0f
    3cc8:	38 89       	ldd	r19, Y+16	; 0x10
    3cca:	8d 89       	ldd	r24, Y+21	; 0x15
    3ccc:	9e 89       	ldd	r25, Y+22	; 0x16
    3cce:	28 17       	cp	r18, r24
    3cd0:	39 07       	cpc	r19, r25
    3cd2:	19 f4       	brne	.+6      	; 0x3cda <CheckPassword+0x64>
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	88 8f       	std	Y+24, r24	; 0x18
    3cd8:	94 c0       	rjmp	.+296    	; 0x3e02 <CheckPassword+0x18c>
	else if	(A_Bool == 2 && L_Pass==pass2 )	{	return 2;	}
    3cda:	8f 89       	ldd	r24, Y+23	; 0x17
    3cdc:	82 30       	cpi	r24, 0x02	; 2
    3cde:	51 f4       	brne	.+20     	; 0x3cf4 <CheckPassword+0x7e>
    3ce0:	2f 85       	ldd	r18, Y+15	; 0x0f
    3ce2:	38 89       	ldd	r19, Y+16	; 0x10
    3ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce8:	28 17       	cp	r18, r24
    3cea:	39 07       	cpc	r19, r25
    3cec:	19 f4       	brne	.+6      	; 0x3cf4 <CheckPassword+0x7e>
    3cee:	82 e0       	ldi	r24, 0x02	; 2
    3cf0:	88 8f       	std	Y+24, r24	; 0x18
    3cf2:	87 c0       	rjmp	.+270    	; 0x3e02 <CheckPassword+0x18c>
	else if (A_Bool == 3 && L_Pass==pass3 )	{	return 3;	}
    3cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf6:	83 30       	cpi	r24, 0x03	; 3
    3cf8:	51 f4       	brne	.+20     	; 0x3d0e <CheckPassword+0x98>
    3cfa:	2f 85       	ldd	r18, Y+15	; 0x0f
    3cfc:	38 89       	ldd	r19, Y+16	; 0x10
    3cfe:	89 89       	ldd	r24, Y+17	; 0x11
    3d00:	9a 89       	ldd	r25, Y+18	; 0x12
    3d02:	28 17       	cp	r18, r24
    3d04:	39 07       	cpc	r19, r25
    3d06:	19 f4       	brne	.+6      	; 0x3d0e <CheckPassword+0x98>
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	88 8f       	std	Y+24, r24	; 0x18
    3d0c:	7a c0       	rjmp	.+244    	; 0x3e02 <CheckPassword+0x18c>
	else
	{
		HLCD_VoidClear();
    3d0e:	0e 94 12 12 	call	0x2424	; 0x2424 <HLCD_VoidClear>
		HLCD_VoidSendString("Wrong password");
    3d12:	80 e3       	ldi	r24, 0x30	; 48
    3d14:	91 e0       	ldi	r25, 0x01	; 1
    3d16:	0e 94 c1 12 	call	0x2582	; 0x2582 <HLCD_VoidSendString>
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	aa e7       	ldi	r26, 0x7A	; 122
    3d20:	b4 e4       	ldi	r27, 0x44	; 68
    3d22:	8b 87       	std	Y+11, r24	; 0x0b
    3d24:	9c 87       	std	Y+12, r25	; 0x0c
    3d26:	ad 87       	std	Y+13, r26	; 0x0d
    3d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	4a ef       	ldi	r20, 0xFA	; 250
    3d38:	54 e4       	ldi	r21, 0x44	; 68
    3d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	8f 83       	std	Y+7, r24	; 0x07
    3d44:	98 87       	std	Y+8, r25	; 0x08
    3d46:	a9 87       	std	Y+9, r26	; 0x09
    3d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4c:	78 85       	ldd	r23, Y+8	; 0x08
    3d4e:	89 85       	ldd	r24, Y+9	; 0x09
    3d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	40 e8       	ldi	r20, 0x80	; 128
    3d58:	5f e3       	ldi	r21, 0x3F	; 63
    3d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d5e:	88 23       	and	r24, r24
    3d60:	2c f4       	brge	.+10     	; 0x3d6c <CheckPassword+0xf6>
		__ticks = 1;
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	9e 83       	std	Y+6, r25	; 0x06
    3d68:	8d 83       	std	Y+5, r24	; 0x05
    3d6a:	3f c0       	rjmp	.+126    	; 0x3dea <CheckPassword+0x174>
	else if (__tmp > 65535)
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	89 85       	ldd	r24, Y+9	; 0x09
    3d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	3f ef       	ldi	r19, 0xFF	; 255
    3d78:	4f e7       	ldi	r20, 0x7F	; 127
    3d7a:	57 e4       	ldi	r21, 0x47	; 71
    3d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d80:	18 16       	cp	r1, r24
    3d82:	4c f5       	brge	.+82     	; 0x3dd6 <CheckPassword+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	40 e2       	ldi	r20, 0x20	; 32
    3d92:	51 e4       	ldi	r21, 0x41	; 65
    3d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9e 83       	std	Y+6, r25	; 0x06
    3daa:	8d 83       	std	Y+5, r24	; 0x05
    3dac:	0f c0       	rjmp	.+30     	; 0x3dcc <CheckPassword+0x156>
    3dae:	88 ec       	ldi	r24, 0xC8	; 200
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	9c 83       	std	Y+4, r25	; 0x04
    3db4:	8b 83       	std	Y+3, r24	; 0x03
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <CheckPassword+0x144>
    3dbe:	9c 83       	std	Y+4, r25	; 0x04
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	9e 83       	std	Y+6, r25	; 0x06
    3dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dce:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	69 f7       	brne	.-38     	; 0x3dae <CheckPassword+0x138>
    3dd4:	14 c0       	rjmp	.+40     	; 0x3dfe <CheckPassword+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd8:	78 85       	ldd	r23, Y+8	; 0x08
    3dda:	89 85       	ldd	r24, Y+9	; 0x09
    3ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	9e 83       	std	Y+6, r25	; 0x06
    3de8:	8d 83       	std	Y+5, r24	; 0x05
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	9e 81       	ldd	r25, Y+6	; 0x06
    3dee:	9a 83       	std	Y+2, r25	; 0x02
    3df0:	89 83       	std	Y+1, r24	; 0x01
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	9a 81       	ldd	r25, Y+2	; 0x02
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <CheckPassword+0x180>
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);

		return 11;
    3dfe:	8b e0       	ldi	r24, 0x0B	; 11
    3e00:	88 8f       	std	Y+24, r24	; 0x18
    3e02:	88 8d       	ldd	r24, Y+24	; 0x18
	}


}
    3e04:	68 96       	adiw	r28, 0x18	; 24
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <__mulsi3>:
    3e16:	62 9f       	mul	r22, r18
    3e18:	d0 01       	movw	r26, r0
    3e1a:	73 9f       	mul	r23, r19
    3e1c:	f0 01       	movw	r30, r0
    3e1e:	82 9f       	mul	r24, r18
    3e20:	e0 0d       	add	r30, r0
    3e22:	f1 1d       	adc	r31, r1
    3e24:	64 9f       	mul	r22, r20
    3e26:	e0 0d       	add	r30, r0
    3e28:	f1 1d       	adc	r31, r1
    3e2a:	92 9f       	mul	r25, r18
    3e2c:	f0 0d       	add	r31, r0
    3e2e:	83 9f       	mul	r24, r19
    3e30:	f0 0d       	add	r31, r0
    3e32:	74 9f       	mul	r23, r20
    3e34:	f0 0d       	add	r31, r0
    3e36:	65 9f       	mul	r22, r21
    3e38:	f0 0d       	add	r31, r0
    3e3a:	99 27       	eor	r25, r25
    3e3c:	72 9f       	mul	r23, r18
    3e3e:	b0 0d       	add	r27, r0
    3e40:	e1 1d       	adc	r30, r1
    3e42:	f9 1f       	adc	r31, r25
    3e44:	63 9f       	mul	r22, r19
    3e46:	b0 0d       	add	r27, r0
    3e48:	e1 1d       	adc	r30, r1
    3e4a:	f9 1f       	adc	r31, r25
    3e4c:	bd 01       	movw	r22, r26
    3e4e:	cf 01       	movw	r24, r30
    3e50:	11 24       	eor	r1, r1
    3e52:	08 95       	ret

00003e54 <__udivmodsi4>:
    3e54:	a1 e2       	ldi	r26, 0x21	; 33
    3e56:	1a 2e       	mov	r1, r26
    3e58:	aa 1b       	sub	r26, r26
    3e5a:	bb 1b       	sub	r27, r27
    3e5c:	fd 01       	movw	r30, r26
    3e5e:	0d c0       	rjmp	.+26     	; 0x3e7a <__udivmodsi4_ep>

00003e60 <__udivmodsi4_loop>:
    3e60:	aa 1f       	adc	r26, r26
    3e62:	bb 1f       	adc	r27, r27
    3e64:	ee 1f       	adc	r30, r30
    3e66:	ff 1f       	adc	r31, r31
    3e68:	a2 17       	cp	r26, r18
    3e6a:	b3 07       	cpc	r27, r19
    3e6c:	e4 07       	cpc	r30, r20
    3e6e:	f5 07       	cpc	r31, r21
    3e70:	20 f0       	brcs	.+8      	; 0x3e7a <__udivmodsi4_ep>
    3e72:	a2 1b       	sub	r26, r18
    3e74:	b3 0b       	sbc	r27, r19
    3e76:	e4 0b       	sbc	r30, r20
    3e78:	f5 0b       	sbc	r31, r21

00003e7a <__udivmodsi4_ep>:
    3e7a:	66 1f       	adc	r22, r22
    3e7c:	77 1f       	adc	r23, r23
    3e7e:	88 1f       	adc	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	1a 94       	dec	r1
    3e84:	69 f7       	brne	.-38     	; 0x3e60 <__udivmodsi4_loop>
    3e86:	60 95       	com	r22
    3e88:	70 95       	com	r23
    3e8a:	80 95       	com	r24
    3e8c:	90 95       	com	r25
    3e8e:	9b 01       	movw	r18, r22
    3e90:	ac 01       	movw	r20, r24
    3e92:	bd 01       	movw	r22, r26
    3e94:	cf 01       	movw	r24, r30
    3e96:	08 95       	ret

00003e98 <__divmodsi4>:
    3e98:	97 fb       	bst	r25, 7
    3e9a:	09 2e       	mov	r0, r25
    3e9c:	05 26       	eor	r0, r21
    3e9e:	0e d0       	rcall	.+28     	; 0x3ebc <__divmodsi4_neg1>
    3ea0:	57 fd       	sbrc	r21, 7
    3ea2:	04 d0       	rcall	.+8      	; 0x3eac <__divmodsi4_neg2>
    3ea4:	d7 df       	rcall	.-82     	; 0x3e54 <__udivmodsi4>
    3ea6:	0a d0       	rcall	.+20     	; 0x3ebc <__divmodsi4_neg1>
    3ea8:	00 1c       	adc	r0, r0
    3eaa:	38 f4       	brcc	.+14     	; 0x3eba <__divmodsi4_exit>

00003eac <__divmodsi4_neg2>:
    3eac:	50 95       	com	r21
    3eae:	40 95       	com	r20
    3eb0:	30 95       	com	r19
    3eb2:	21 95       	neg	r18
    3eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    3eb8:	5f 4f       	sbci	r21, 0xFF	; 255

00003eba <__divmodsi4_exit>:
    3eba:	08 95       	ret

00003ebc <__divmodsi4_neg1>:
    3ebc:	f6 f7       	brtc	.-4      	; 0x3eba <__divmodsi4_exit>
    3ebe:	90 95       	com	r25
    3ec0:	80 95       	com	r24
    3ec2:	70 95       	com	r23
    3ec4:	61 95       	neg	r22
    3ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eca:	9f 4f       	sbci	r25, 0xFF	; 255
    3ecc:	08 95       	ret

00003ece <__prologue_saves__>:
    3ece:	2f 92       	push	r2
    3ed0:	3f 92       	push	r3
    3ed2:	4f 92       	push	r4
    3ed4:	5f 92       	push	r5
    3ed6:	6f 92       	push	r6
    3ed8:	7f 92       	push	r7
    3eda:	8f 92       	push	r8
    3edc:	9f 92       	push	r9
    3ede:	af 92       	push	r10
    3ee0:	bf 92       	push	r11
    3ee2:	cf 92       	push	r12
    3ee4:	df 92       	push	r13
    3ee6:	ef 92       	push	r14
    3ee8:	ff 92       	push	r15
    3eea:	0f 93       	push	r16
    3eec:	1f 93       	push	r17
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	ca 1b       	sub	r28, r26
    3ef8:	db 0b       	sbc	r29, r27
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	09 94       	ijmp

00003f06 <__epilogue_restores__>:
    3f06:	2a 88       	ldd	r2, Y+18	; 0x12
    3f08:	39 88       	ldd	r3, Y+17	; 0x11
    3f0a:	48 88       	ldd	r4, Y+16	; 0x10
    3f0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f10:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f12:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f14:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f16:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f18:	b9 84       	ldd	r11, Y+9	; 0x09
    3f1a:	c8 84       	ldd	r12, Y+8	; 0x08
    3f1c:	df 80       	ldd	r13, Y+7	; 0x07
    3f1e:	ee 80       	ldd	r14, Y+6	; 0x06
    3f20:	fd 80       	ldd	r15, Y+5	; 0x05
    3f22:	0c 81       	ldd	r16, Y+4	; 0x04
    3f24:	1b 81       	ldd	r17, Y+3	; 0x03
    3f26:	aa 81       	ldd	r26, Y+2	; 0x02
    3f28:	b9 81       	ldd	r27, Y+1	; 0x01
    3f2a:	ce 0f       	add	r28, r30
    3f2c:	d1 1d       	adc	r29, r1
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	ed 01       	movw	r28, r26
    3f3a:	08 95       	ret

00003f3c <_exit>:
    3f3c:	f8 94       	cli

00003f3e <__stop_program>:
    3f3e:	ff cf       	rjmp	.-2      	; 0x3f3e <__stop_program>
